{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///build.js","webpack:///webpack/bootstrap 35bcf0b100a3b7b8b482","webpack:///./index.js","webpack:///./~/hammerjs/hammer.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","_interopRequireDefault","obj","__esModule","default","_classCallCheck","instance","Constructor","TypeError","Object","defineProperty","value","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","key","protoProps","staticProps","prototype","_hammerjs","_hammerjs2","PhotoViewManager","options","arguments","undefined","defaultOptions","maxScale","enableMultiZoom","snapToGrid","tapToZoom","assign","selector","container","document","querySelectorAll","image","_manager","Manager","touchAction","_registerGestures","_registerEvents","scale","deltaX","deltaY","console","warn","zoom","Tap","event","taps","pan","Pan","direction","DIRECTION_ALL","threshold","pinch","Pinch","add","midScale","e","stopPropagation","preventDefault","addEventListener","imageTouchHandler","removeEventListener","disableTouchEvents","enableTouchEvents","_this","on","_e$center","center","x","y","_getZoomLevel","_setTransition","_transform","handleTouchEvent","clearTimeout","panTimer","_enableGesture","_e$center2","pinchX","pinchY","additionalEvent","setTimeout","_","srcEvent","currentDeltaX","isNaN","currentDeltaY","_adjustSnapPositions","style","transform","imageOffsetLeft","offsetLeft","imageOffsetTop","offsetTop","width","adjustWidth","height","adjustHeight","_onTransformEnd","gesture","get","set","enable","transition","off","_unregisterEvents","PhotoView","_this2","instances","slice","Array","elements","forEach","item","push","init","photoViewInstance","reset","destroy","__WEBPACK_AMD_DEFINE_RESULT__","window","exportName","setTimeoutContext","fn","timeout","context","bindFn","invokeArrayArg","arg","isArray","each","iterator","hasOwnProperty","deprecate","method","name","message","deprecationMessage","Error","stack","replace","log","apply","inherit","child","base","properties","childP","baseP","create","constructor","_super","boolOrFn","val","args","TYPE_FUNCTION","ifUndefined","val1","val2","addEventListeners","types","handler","splitStr","type","removeEventListeners","hasParent","node","parent","parentNode","inStr","str","find","indexOf","trim","split","inArray","src","findByKey","toArray","uniqueArray","sort","results","values","a","b","prefixed","property","prefix","prop","camelProp","toUpperCase","VENDOR_PREFIXES","uniqueId","_uniqueId","getWindowForElement","element","doc","ownerDocument","defaultView","parentWindow","Input","manager","callback","self","inputTarget","domHandler","ev","createInputInstance","Type","inputClass","SUPPORT_POINTER_EVENTS","PointerEventInput","SUPPORT_ONLY_TOUCH","TouchInput","SUPPORT_TOUCH","TouchMouseInput","MouseInput","inputHandler","eventType","input","pointersLen","pointers","changedPointersLen","changedPointers","isFirst","INPUT_START","isFinal","INPUT_END","INPUT_CANCEL","session","computeInputData","emit","recognize","prevInput","pointersLength","firstInput","simpleCloneInputData","firstMultiple","offsetCenter","getCenter","timeStamp","now","deltaTime","angle","getAngle","distance","getDistance","computeDeltaXY","offsetDirection","getDirection","overallVelocity","getVelocity","overallVelocityX","overallVelocityY","abs","getScale","rotation","getRotation","maxPointers","computeIntervalInputData","offset","offsetDelta","prevDelta","velocity","velocityX","velocityY","last","lastInterval","COMPUTE_INTERVAL","v","clientX","round","clientY","DIRECTION_NONE","DIRECTION_LEFT","DIRECTION_RIGHT","DIRECTION_UP","DIRECTION_DOWN","p1","p2","PROPS_XY","Math","sqrt","atan2","PI","start","end","PROPS_CLIENT_XY","evEl","MOUSE_ELEMENT_EVENTS","evWin","MOUSE_WINDOW_EVENTS","pressed","POINTER_ELEMENT_EVENTS","POINTER_WINDOW_EVENTS","store","pointerEvents","SingleTouchInput","evTarget","SINGLE_TOUCH_TARGET_EVENTS","SINGLE_TOUCH_WINDOW_EVENTS","started","normalizeSingleTouches","all","touches","changed","changedTouches","concat","TOUCH_TARGET_EVENTS","targetIds","getTouches","allTouches","INPUT_MOVE","identifier","targetTouches","changedTargetTouches","filter","touch","mouse","primaryTouch","lastTouches","recordTouches","eventData","setLastTouch","lastTouch","lts","removeLastTouch","splice","DEDUP_TIMEOUT","isSyntheticEvent","t","dx","dy","DEDUP_DISTANCE","TouchAction","cleanTouchActions","actions","TOUCH_ACTION_NONE","hasPanX","TOUCH_ACTION_PAN_X","hasPanY","TOUCH_ACTION_PAN_Y","TOUCH_ACTION_MANIPULATION","TOUCH_ACTION_AUTO","getTouchActionProps","NATIVE_TOUCH_ACTION","touchMap","cssSupports","CSS","supports","Recognizer","defaults","state","STATE_POSSIBLE","simultaneous","requireFail","stateStr","STATE_CANCELLED","STATE_ENDED","STATE_CHANGED","STATE_BEGAN","directionStr","getRecognizerByNameIfManager","otherRecognizer","recognizer","AttrRecognizer","PanRecognizer","pX","pY","PinchRecognizer","PressRecognizer","_timer","_input","RotateRecognizer","SwipeRecognizer","TapRecognizer","pTime","pCenter","count","Hammer","recognizers","preset","handlers","oldCssProps","toggleCssProps","recognizeWith","requireFailure","cssProps","triggerDomEvent","data","gestureEvent","createEvent","initEvent","dispatchEvent","TEST_ELEMENT","createElement","Date","output","index","source","nextKey","extend","dest","merge","keys","MOBILE_REGEX","test","navigator","userAgent","INPUT_TYPE_TOUCH","INPUT_TYPE_PEN","INPUT_TYPE_MOUSE","INPUT_TYPE_KINECT","DIRECTION_HORIZONTAL","DIRECTION_VERTICAL","MOUSE_INPUT_MAP","mousedown","mousemove","mouseup","button","which","pointerType","POINTER_INPUT_MAP","pointerdown","pointermove","pointerup","pointercancel","pointerout","IE10_POINTER_TYPE_ENUM","2","3","4","5","MSPointerEvent","PointerEvent","removePointer","eventTypeNormalized","toLowerCase","isTouch","storeIndex","pointerId","SINGLE_TOUCH_INPUT_MAP","touchstart","touchmove","touchend","touchcancel","TOUCH_INPUT_MAP","inputEvent","inputData","isMouse","sourceCapabilities","firesTouchEvents","PREFIXED_TOUCH_ACTION","TOUCH_ACTION_COMPUTE","TOUCH_ACTION_MAP","compute","update","getTouchAction","join","preventDefaults","prevented","hasNone","isTapPointer","isTapMovement","isTapTouchTime","preventSrc","STATE_RECOGNIZED","STATE_FAILED","dropRecognizeWith","dropRequireFailure","hasRequireFailures","canRecognizeWith","tryEmit","canEmit","inputDataClone","process","attrTest","optionPointers","isRecognized","isValid","directionTest","hasMoved","inOut","time","validPointers","validMovement","validTime","interval","posThreshold","validTouchTime","failTimeout","validInterval","validMultiTap","tapCount","VERSION","domEvents","userSelect","touchSelect","touchCallout","contentZooming","userDrag","tapHighlightColor","STOP","FORCED_STOP","stop","force","stopped","curRecognizer","existing","remove","events","Swipe","Rotate","Press","freeGlobal"],"mappings":"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","file":"build.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"PhotoView\"] = factory();\n\telse\n\t\troot[\"PhotoView\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"PhotoView\"] = factory();\n\telse\n\t\troot[\"PhotoView\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(1);\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _hammerjs = __webpack_require__(2);\n\t\n\tvar _hammerjs2 = _interopRequireDefault(_hammerjs);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar PhotoViewManager = function () {\n\t  function PhotoViewManager() {\n\t    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\t\n\t    _classCallCheck(this, PhotoViewManager);\n\t\n\t    var defaultOptions = {\n\t      maxScale: 2,\n\t      enableMultiZoom: false,\n\t      snapToGrid: true,\n\t      tapToZoom: false\n\t    };\n\t\n\t    this.options = Object.assign(defaultOptions, options);\n\t    return this;\n\t  }\n\t\n\t  _createClass(PhotoViewManager, [{\n\t    key: 'init',\n\t    value: function init(selector) {\n\t      var container = typeof selector === 'string' ? document.querySelectorAll(selector)[0] : selector;\n\t      if (!container) {\n\t        console.warn('You must provide a valid container for PhotoView (selector \"' + selector + '\" did not match any element)');\n\t        return;\n\t      }\n\t\n\t      this.image = container.querySelectorAll('img')[0];\n\t      if (!this.image) {\n\t        console.warn('You must have a valid img tag inside your container');\n\t        return;\n\t      }\n\t\n\t      this._manager = new _hammerjs2.default.Manager(this.image, { touchAction: 'pan-y' });\n\t      this._registerGestures();\n\t      this._registerEvents();\n\t      this.scale = 1;\n\t      this.deltaX = 0;\n\t      this.deltaY = 0;\n\t      return this;\n\t    }\n\t  }, {\n\t    key: '_registerGestures',\n\t    value: function _registerGestures() {\n\t      var zoom = new _hammerjs2.default.Tap({ event: 'zoom', taps: this.options.tapToZoom ? 1 : 2 });\n\t      var pan = new _hammerjs2.default.Pan({ direction: _hammerjs2.default.DIRECTION_ALL, threshold: 10 });\n\t      var pinch = new _hammerjs2.default.Pinch();\n\t      this._manager.add([pinch, zoom, pan]);\n\t    }\n\t  }, {\n\t    key: '_getZoomLevel',\n\t    value: function _getZoomLevel() {\n\t      var scale = void 0;\n\t      if (this.options.enableMultiZoom) {\n\t        var midScale = this.options.maxScale / 2;\n\t        scale = this.scale === 1 ? midScale : this.scale === midScale ? this.options.maxScale : 1;\n\t      } else {\n\t        scale = this.scale > 1 ? 1 : this.options.maxScale;\n\t      }\n\t\n\t      return scale;\n\t    }\n\t  }, {\n\t    key: 'imageTouchHandler',\n\t    value: function imageTouchHandler(e) {\n\t      e.stopPropagation();\n\t      e.preventDefault();\n\t    }\n\t  }, {\n\t    key: 'disableTouchEvents',\n\t    value: function disableTouchEvents() {\n\t      this.image.addEventListener('touchmove', this.imageTouchHandler, false);\n\t      this.image.addEventListener('touchstart', this.imageTouchHandler, false);\n\t    }\n\t  }, {\n\t    key: 'enableTouchEvents',\n\t    value: function enableTouchEvents() {\n\t      this.image.removeEventListener('touchmove', this.imageTouchHandler, false);\n\t      this.image.removeEventListener('touchstart', this.imageTouchHandler, false);\n\t    }\n\t  }, {\n\t    key: 'handleTouchEvent',\n\t    value: function handleTouchEvent() {\n\t      if (this.scale > 1) {\n\t        this.disableTouchEvents();\n\t      } else {\n\t        this.enableTouchEvents();\n\t      }\n\t    }\n\t  }, {\n\t    key: '_registerEvents',\n\t    value: function _registerEvents() {\n\t      var _this = this;\n\t\n\t      this._manager.on('zoom', function (e) {\n\t        var _e$center = e.center;\n\t        var x = _e$center.x;\n\t        var y = _e$center.y;\n\t\n\t        var scale = _this._getZoomLevel();\n\t        _this._setTransition(true);\n\t        _this._transform(x, y, scale);\n\t        _this.handleTouchEvent();\n\t      });\n\t\n\t      this._manager.on('pinchstart', function (e) {\n\t        clearTimeout(_this.panTimer);\n\t        _this._enableGesture('pan', false);\n\t        var _e$center2 = e.center;\n\t        var x = _e$center2.x;\n\t        var y = _e$center2.y;\n\t\n\t        _this._setTransition(true);\n\t\n\t        if (_this.scale === 1) {\n\t          _this.pinchX = x;\n\t          _this.pinchY = y;\n\t        }\n\t      });\n\t\n\t      this._manager.on('pinch', function (e) {\n\t        if (e.additionalEvent === 'pinchout') {\n\t          _this._transform(_this.pinchX, _this.pinchY, _this.options.maxScale);\n\t        } else if (e.additionalEvent === 'pinchin') {\n\t          _this._transform(0, 0, 1);\n\t        }\n\t\n\t        _this.handleTouchEvent();\n\t      });\n\t\n\t      this._manager.on('pinchend', function (e) {\n\t        _this.panTimer = setTimeout(function (_) {\n\t          return _this._enableGesture('pan', true);\n\t        }, 1000);\n\t      });\n\t\n\t      this._manager.on('panstart', function (e) {\n\t        _this._setTransition(false);\n\t      });\n\t\n\t      this._manager.on('pan', function (e) {\n\t        if (_this.scale === 1) {\n\t          return;\n\t        }\n\t\n\t        e.srcEvent.stopPropagation();\n\t        _this.currentDeltaX = (isNaN(_this.deltaX) ? 0 : _this.deltaX) + e.deltaX;\n\t        _this.currentDeltaY = (isNaN(_this.deltaY) ? 0 : _this.deltaY) + e.deltaY;\n\t        if (_this.options.snapToGrid) {\n\t          _this._adjustSnapPositions();\n\t        }\n\t\n\t        _this._setTransition(false);\n\t        _this.image.style.transform = 'translate3d(' + _this.currentDeltaX + 'px, ' + _this.currentDeltaY + 'px, 0px) scale(' + _this.scale + ')';\n\t      });\n\t\n\t      this._manager.on('panend', function (e) {\n\t        _this.deltaX = _this.currentDeltaX;\n\t        _this.deltaY = _this.currentDeltaY;\n\t      });\n\t    }\n\t  }, {\n\t    key: '_adjustSnapPositions',\n\t    value: function _adjustSnapPositions() {\n\t      var imageOffsetLeft = this.image.offsetLeft;\n\t      var imageOffsetTop = this.image.offsetTop;\n\t      if (this.currentDeltaX + imageOffsetLeft > this.x) {\n\t        this.currentDeltaX = this.x - imageOffsetLeft;\n\t      } else if (this.x - this.currentDeltaX + imageOffsetLeft > this.image.width) {\n\t        var adjustWidth = this.x - this.currentDeltaX + imageOffsetLeft - this.image.width;\n\t        this.currentDeltaX = this.currentDeltaX + adjustWidth;\n\t      }\n\t\n\t      if (this.currentDeltaY + imageOffsetTop > this.y) {\n\t        this.currentDeltaY = this.y - imageOffsetTop;\n\t      } else if (this.y - this.currentDeltaY + imageOffsetTop > this.image.height) {\n\t        var adjustHeight = this.y - this.currentDeltaY + imageOffsetTop - this.image.height;\n\t        this.currentDeltaY = this.currentDeltaY + adjustHeight;\n\t      }\n\t    }\n\t  }, {\n\t    key: '_transform',\n\t    value: function _transform(x, y, scale) {\n\t      if (scale === 1) {\n\t        x = this.x;y = this.y;\n\t      } else {\n\t        x -= this.image.offsetLeft;\n\t        y -= this.image.offsetTop;\n\t      }\n\t\n\t      this.image.style['transformOrigin'] = x + 'px ' + y + 'px';\n\t      this.image.style.transform = 'scale3d(' + scale + ',' + scale + ',1)';\n\t      this.x = x;\n\t      this.y = y;\n\t      this.scale = scale;\n\t      this._onTransformEnd();\n\t    }\n\t  }, {\n\t    key: '_onTransformEnd',\n\t    value: function _onTransformEnd() {\n\t      if (this.scale <= 1) {\n\t        this.deltaX = this.deltaY = 0;\n\t      }\n\t    }\n\t  }, {\n\t    key: '_enableGesture',\n\t    value: function _enableGesture(gesture, value) {\n\t      this._manager.get(gesture).set({ enable: value });\n\t    }\n\t  }, {\n\t    key: '_setTransition',\n\t    value: function _setTransition(value) {\n\t      this.image.style.transition = value ? 'transform 0.5s' : 'none';\n\t    }\n\t  }, {\n\t    key: '_unregisterEvents',\n\t    value: function _unregisterEvents() {\n\t      this._manager.off('pan');\n\t      this._manager.off('pinch');\n\t      this._manager.off('zoom');\n\t    }\n\t  }, {\n\t    key: 'reset',\n\t    value: function reset() {\n\t      this.image.style.transform = 'none';\n\t    }\n\t  }, {\n\t    key: 'destroy',\n\t    value: function destroy() {\n\t      this._unregisterEvents();\n\t      this._manager = null;\n\t    }\n\t  }]);\n\t\n\t  return PhotoViewManager;\n\t}();\n\t\n\tvar PhotoView = function () {\n\t  function PhotoView(selector) {\n\t    var _this2 = this;\n\t\n\t    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\t\n\t    _classCallCheck(this, PhotoView);\n\t\n\t    this.instances = [];\n\t    var slice = Array.prototype.slice;\n\t    var elements = slice.call(document.querySelectorAll(selector));\n\t    elements.forEach(function (item) {\n\t      _this2.instances.push(new PhotoViewManager(options).init(item));\n\t    });\n\t  }\n\t\n\t  _createClass(PhotoView, [{\n\t    key: 'reset',\n\t    value: function reset() {\n\t      this.instances.forEach(function (photoViewInstance) {\n\t        photoViewInstance.reset();\n\t      });\n\t    }\n\t  }, {\n\t    key: 'destroy',\n\t    value: function destroy() {\n\t      this.instances.forEach(function (photoViewInstance) {\n\t        photoViewInstance.destroy();\n\t      });\n\t\n\t      this.instances = null;\n\t    }\n\t  }]);\n\t\n\t  return PhotoView;\n\t}();\n\t\n\texports.default = PhotoView;\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;/*! Hammer.JS - v2.0.7 - 2016-04-22\n\t * http://hammerjs.github.io/\n\t *\n\t * Copyright (c) 2016 Jorik Tangelder;\n\t * Licensed under the MIT license */\n\t(function(window, document, exportName, undefined) {\n\t  'use strict';\n\t\n\tvar VENDOR_PREFIXES = ['', 'webkit', 'Moz', 'MS', 'ms', 'o'];\n\tvar TEST_ELEMENT = document.createElement('div');\n\t\n\tvar TYPE_FUNCTION = 'function';\n\t\n\tvar round = Math.round;\n\tvar abs = Math.abs;\n\tvar now = Date.now;\n\t\n\t/**\n\t * set a timeout with a given scope\n\t * @param {Function} fn\n\t * @param {Number} timeout\n\t * @param {Object} context\n\t * @returns {number}\n\t */\n\tfunction setTimeoutContext(fn, timeout, context) {\n\t    return setTimeout(bindFn(fn, context), timeout);\n\t}\n\t\n\t/**\n\t * if the argument is an array, we want to execute the fn on each entry\n\t * if it aint an array we don't want to do a thing.\n\t * this is used by all the methods that accept a single and array argument.\n\t * @param {*|Array} arg\n\t * @param {String} fn\n\t * @param {Object} [context]\n\t * @returns {Boolean}\n\t */\n\tfunction invokeArrayArg(arg, fn, context) {\n\t    if (Array.isArray(arg)) {\n\t        each(arg, context[fn], context);\n\t        return true;\n\t    }\n\t    return false;\n\t}\n\t\n\t/**\n\t * walk objects and arrays\n\t * @param {Object} obj\n\t * @param {Function} iterator\n\t * @param {Object} context\n\t */\n\tfunction each(obj, iterator, context) {\n\t    var i;\n\t\n\t    if (!obj) {\n\t        return;\n\t    }\n\t\n\t    if (obj.forEach) {\n\t        obj.forEach(iterator, context);\n\t    } else if (obj.length !== undefined) {\n\t        i = 0;\n\t        while (i < obj.length) {\n\t            iterator.call(context, obj[i], i, obj);\n\t            i++;\n\t        }\n\t    } else {\n\t        for (i in obj) {\n\t            obj.hasOwnProperty(i) && iterator.call(context, obj[i], i, obj);\n\t        }\n\t    }\n\t}\n\t\n\t/**\n\t * wrap a method with a deprecation warning and stack trace\n\t * @param {Function} method\n\t * @param {String} name\n\t * @param {String} message\n\t * @returns {Function} A new function wrapping the supplied method.\n\t */\n\tfunction deprecate(method, name, message) {\n\t    var deprecationMessage = 'DEPRECATED METHOD: ' + name + '\\n' + message + ' AT \\n';\n\t    return function() {\n\t        var e = new Error('get-stack-trace');\n\t        var stack = e && e.stack ? e.stack.replace(/^[^\\(]+?[\\n$]/gm, '')\n\t            .replace(/^\\s+at\\s+/gm, '')\n\t            .replace(/^Object.<anonymous>\\s*\\(/gm, '{anonymous}()@') : 'Unknown Stack Trace';\n\t\n\t        var log = window.console && (window.console.warn || window.console.log);\n\t        if (log) {\n\t            log.call(window.console, deprecationMessage, stack);\n\t        }\n\t        return method.apply(this, arguments);\n\t    };\n\t}\n\t\n\t/**\n\t * extend object.\n\t * means that properties in dest will be overwritten by the ones in src.\n\t * @param {Object} target\n\t * @param {...Object} objects_to_assign\n\t * @returns {Object} target\n\t */\n\tvar assign;\n\tif (typeof Object.assign !== 'function') {\n\t    assign = function assign(target) {\n\t        if (target === undefined || target === null) {\n\t            throw new TypeError('Cannot convert undefined or null to object');\n\t        }\n\t\n\t        var output = Object(target);\n\t        for (var index = 1; index < arguments.length; index++) {\n\t            var source = arguments[index];\n\t            if (source !== undefined && source !== null) {\n\t                for (var nextKey in source) {\n\t                    if (source.hasOwnProperty(nextKey)) {\n\t                        output[nextKey] = source[nextKey];\n\t                    }\n\t                }\n\t            }\n\t        }\n\t        return output;\n\t    };\n\t} else {\n\t    assign = Object.assign;\n\t}\n\t\n\t/**\n\t * extend object.\n\t * means that properties in dest will be overwritten by the ones in src.\n\t * @param {Object} dest\n\t * @param {Object} src\n\t * @param {Boolean} [merge=false]\n\t * @returns {Object} dest\n\t */\n\tvar extend = deprecate(function extend(dest, src, merge) {\n\t    var keys = Object.keys(src);\n\t    var i = 0;\n\t    while (i < keys.length) {\n\t        if (!merge || (merge && dest[keys[i]] === undefined)) {\n\t            dest[keys[i]] = src[keys[i]];\n\t        }\n\t        i++;\n\t    }\n\t    return dest;\n\t}, 'extend', 'Use `assign`.');\n\t\n\t/**\n\t * merge the values from src in the dest.\n\t * means that properties that exist in dest will not be overwritten by src\n\t * @param {Object} dest\n\t * @param {Object} src\n\t * @returns {Object} dest\n\t */\n\tvar merge = deprecate(function merge(dest, src) {\n\t    return extend(dest, src, true);\n\t}, 'merge', 'Use `assign`.');\n\t\n\t/**\n\t * simple class inheritance\n\t * @param {Function} child\n\t * @param {Function} base\n\t * @param {Object} [properties]\n\t */\n\tfunction inherit(child, base, properties) {\n\t    var baseP = base.prototype,\n\t        childP;\n\t\n\t    childP = child.prototype = Object.create(baseP);\n\t    childP.constructor = child;\n\t    childP._super = baseP;\n\t\n\t    if (properties) {\n\t        assign(childP, properties);\n\t    }\n\t}\n\t\n\t/**\n\t * simple function bind\n\t * @param {Function} fn\n\t * @param {Object} context\n\t * @returns {Function}\n\t */\n\tfunction bindFn(fn, context) {\n\t    return function boundFn() {\n\t        return fn.apply(context, arguments);\n\t    };\n\t}\n\t\n\t/**\n\t * let a boolean value also be a function that must return a boolean\n\t * this first item in args will be used as the context\n\t * @param {Boolean|Function} val\n\t * @param {Array} [args]\n\t * @returns {Boolean}\n\t */\n\tfunction boolOrFn(val, args) {\n\t    if (typeof val == TYPE_FUNCTION) {\n\t        return val.apply(args ? args[0] || undefined : undefined, args);\n\t    }\n\t    return val;\n\t}\n\t\n\t/**\n\t * use the val2 when val1 is undefined\n\t * @param {*} val1\n\t * @param {*} val2\n\t * @returns {*}\n\t */\n\tfunction ifUndefined(val1, val2) {\n\t    return (val1 === undefined) ? val2 : val1;\n\t}\n\t\n\t/**\n\t * addEventListener with multiple events at once\n\t * @param {EventTarget} target\n\t * @param {String} types\n\t * @param {Function} handler\n\t */\n\tfunction addEventListeners(target, types, handler) {\n\t    each(splitStr(types), function(type) {\n\t        target.addEventListener(type, handler, false);\n\t    });\n\t}\n\t\n\t/**\n\t * removeEventListener with multiple events at once\n\t * @param {EventTarget} target\n\t * @param {String} types\n\t * @param {Function} handler\n\t */\n\tfunction removeEventListeners(target, types, handler) {\n\t    each(splitStr(types), function(type) {\n\t        target.removeEventListener(type, handler, false);\n\t    });\n\t}\n\t\n\t/**\n\t * find if a node is in the given parent\n\t * @method hasParent\n\t * @param {HTMLElement} node\n\t * @param {HTMLElement} parent\n\t * @return {Boolean} found\n\t */\n\tfunction hasParent(node, parent) {\n\t    while (node) {\n\t        if (node == parent) {\n\t            return true;\n\t        }\n\t        node = node.parentNode;\n\t    }\n\t    return false;\n\t}\n\t\n\t/**\n\t * small indexOf wrapper\n\t * @param {String} str\n\t * @param {String} find\n\t * @returns {Boolean} found\n\t */\n\tfunction inStr(str, find) {\n\t    return str.indexOf(find) > -1;\n\t}\n\t\n\t/**\n\t * split string on whitespace\n\t * @param {String} str\n\t * @returns {Array} words\n\t */\n\tfunction splitStr(str) {\n\t    return str.trim().split(/\\s+/g);\n\t}\n\t\n\t/**\n\t * find if a array contains the object using indexOf or a simple polyFill\n\t * @param {Array} src\n\t * @param {String} find\n\t * @param {String} [findByKey]\n\t * @return {Boolean|Number} false when not found, or the index\n\t */\n\tfunction inArray(src, find, findByKey) {\n\t    if (src.indexOf && !findByKey) {\n\t        return src.indexOf(find);\n\t    } else {\n\t        var i = 0;\n\t        while (i < src.length) {\n\t            if ((findByKey && src[i][findByKey] == find) || (!findByKey && src[i] === find)) {\n\t                return i;\n\t            }\n\t            i++;\n\t        }\n\t        return -1;\n\t    }\n\t}\n\t\n\t/**\n\t * convert array-like objects to real arrays\n\t * @param {Object} obj\n\t * @returns {Array}\n\t */\n\tfunction toArray(obj) {\n\t    return Array.prototype.slice.call(obj, 0);\n\t}\n\t\n\t/**\n\t * unique array with objects based on a key (like 'id') or just by the array's value\n\t * @param {Array} src [{id:1},{id:2},{id:1}]\n\t * @param {String} [key]\n\t * @param {Boolean} [sort=False]\n\t * @returns {Array} [{id:1},{id:2}]\n\t */\n\tfunction uniqueArray(src, key, sort) {\n\t    var results = [];\n\t    var values = [];\n\t    var i = 0;\n\t\n\t    while (i < src.length) {\n\t        var val = key ? src[i][key] : src[i];\n\t        if (inArray(values, val) < 0) {\n\t            results.push(src[i]);\n\t        }\n\t        values[i] = val;\n\t        i++;\n\t    }\n\t\n\t    if (sort) {\n\t        if (!key) {\n\t            results = results.sort();\n\t        } else {\n\t            results = results.sort(function sortUniqueArray(a, b) {\n\t                return a[key] > b[key];\n\t            });\n\t        }\n\t    }\n\t\n\t    return results;\n\t}\n\t\n\t/**\n\t * get the prefixed property\n\t * @param {Object} obj\n\t * @param {String} property\n\t * @returns {String|Undefined} prefixed\n\t */\n\tfunction prefixed(obj, property) {\n\t    var prefix, prop;\n\t    var camelProp = property[0].toUpperCase() + property.slice(1);\n\t\n\t    var i = 0;\n\t    while (i < VENDOR_PREFIXES.length) {\n\t        prefix = VENDOR_PREFIXES[i];\n\t        prop = (prefix) ? prefix + camelProp : property;\n\t\n\t        if (prop in obj) {\n\t            return prop;\n\t        }\n\t        i++;\n\t    }\n\t    return undefined;\n\t}\n\t\n\t/**\n\t * get a unique id\n\t * @returns {number} uniqueId\n\t */\n\tvar _uniqueId = 1;\n\tfunction uniqueId() {\n\t    return _uniqueId++;\n\t}\n\t\n\t/**\n\t * get the window object of an element\n\t * @param {HTMLElement} element\n\t * @returns {DocumentView|Window}\n\t */\n\tfunction getWindowForElement(element) {\n\t    var doc = element.ownerDocument || element;\n\t    return (doc.defaultView || doc.parentWindow || window);\n\t}\n\t\n\tvar MOBILE_REGEX = /mobile|tablet|ip(ad|hone|od)|android/i;\n\t\n\tvar SUPPORT_TOUCH = ('ontouchstart' in window);\n\tvar SUPPORT_POINTER_EVENTS = prefixed(window, 'PointerEvent') !== undefined;\n\tvar SUPPORT_ONLY_TOUCH = SUPPORT_TOUCH && MOBILE_REGEX.test(navigator.userAgent);\n\t\n\tvar INPUT_TYPE_TOUCH = 'touch';\n\tvar INPUT_TYPE_PEN = 'pen';\n\tvar INPUT_TYPE_MOUSE = 'mouse';\n\tvar INPUT_TYPE_KINECT = 'kinect';\n\t\n\tvar COMPUTE_INTERVAL = 25;\n\t\n\tvar INPUT_START = 1;\n\tvar INPUT_MOVE = 2;\n\tvar INPUT_END = 4;\n\tvar INPUT_CANCEL = 8;\n\t\n\tvar DIRECTION_NONE = 1;\n\tvar DIRECTION_LEFT = 2;\n\tvar DIRECTION_RIGHT = 4;\n\tvar DIRECTION_UP = 8;\n\tvar DIRECTION_DOWN = 16;\n\t\n\tvar DIRECTION_HORIZONTAL = DIRECTION_LEFT | DIRECTION_RIGHT;\n\tvar DIRECTION_VERTICAL = DIRECTION_UP | DIRECTION_DOWN;\n\tvar DIRECTION_ALL = DIRECTION_HORIZONTAL | DIRECTION_VERTICAL;\n\t\n\tvar PROPS_XY = ['x', 'y'];\n\tvar PROPS_CLIENT_XY = ['clientX', 'clientY'];\n\t\n\t/**\n\t * create new input type manager\n\t * @param {Manager} manager\n\t * @param {Function} callback\n\t * @returns {Input}\n\t * @constructor\n\t */\n\tfunction Input(manager, callback) {\n\t    var self = this;\n\t    this.manager = manager;\n\t    this.callback = callback;\n\t    this.element = manager.element;\n\t    this.target = manager.options.inputTarget;\n\t\n\t    // smaller wrapper around the handler, for the scope and the enabled state of the manager,\n\t    // so when disabled the input events are completely bypassed.\n\t    this.domHandler = function(ev) {\n\t        if (boolOrFn(manager.options.enable, [manager])) {\n\t            self.handler(ev);\n\t        }\n\t    };\n\t\n\t    this.init();\n\t\n\t}\n\t\n\tInput.prototype = {\n\t    /**\n\t     * should handle the inputEvent data and trigger the callback\n\t     * @virtual\n\t     */\n\t    handler: function() { },\n\t\n\t    /**\n\t     * bind the events\n\t     */\n\t    init: function() {\n\t        this.evEl && addEventListeners(this.element, this.evEl, this.domHandler);\n\t        this.evTarget && addEventListeners(this.target, this.evTarget, this.domHandler);\n\t        this.evWin && addEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);\n\t    },\n\t\n\t    /**\n\t     * unbind the events\n\t     */\n\t    destroy: function() {\n\t        this.evEl && removeEventListeners(this.element, this.evEl, this.domHandler);\n\t        this.evTarget && removeEventListeners(this.target, this.evTarget, this.domHandler);\n\t        this.evWin && removeEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);\n\t    }\n\t};\n\t\n\t/**\n\t * create new input type manager\n\t * called by the Manager constructor\n\t * @param {Hammer} manager\n\t * @returns {Input}\n\t */\n\tfunction createInputInstance(manager) {\n\t    var Type;\n\t    var inputClass = manager.options.inputClass;\n\t\n\t    if (inputClass) {\n\t        Type = inputClass;\n\t    } else if (SUPPORT_POINTER_EVENTS) {\n\t        Type = PointerEventInput;\n\t    } else if (SUPPORT_ONLY_TOUCH) {\n\t        Type = TouchInput;\n\t    } else if (!SUPPORT_TOUCH) {\n\t        Type = MouseInput;\n\t    } else {\n\t        Type = TouchMouseInput;\n\t    }\n\t    return new (Type)(manager, inputHandler);\n\t}\n\t\n\t/**\n\t * handle input events\n\t * @param {Manager} manager\n\t * @param {String} eventType\n\t * @param {Object} input\n\t */\n\tfunction inputHandler(manager, eventType, input) {\n\t    var pointersLen = input.pointers.length;\n\t    var changedPointersLen = input.changedPointers.length;\n\t    var isFirst = (eventType & INPUT_START && (pointersLen - changedPointersLen === 0));\n\t    var isFinal = (eventType & (INPUT_END | INPUT_CANCEL) && (pointersLen - changedPointersLen === 0));\n\t\n\t    input.isFirst = !!isFirst;\n\t    input.isFinal = !!isFinal;\n\t\n\t    if (isFirst) {\n\t        manager.session = {};\n\t    }\n\t\n\t    // source event is the normalized value of the domEvents\n\t    // like 'touchstart, mouseup, pointerdown'\n\t    input.eventType = eventType;\n\t\n\t    // compute scale, rotation etc\n\t    computeInputData(manager, input);\n\t\n\t    // emit secret event\n\t    manager.emit('hammer.input', input);\n\t\n\t    manager.recognize(input);\n\t    manager.session.prevInput = input;\n\t}\n\t\n\t/**\n\t * extend the data with some usable properties like scale, rotate, velocity etc\n\t * @param {Object} manager\n\t * @param {Object} input\n\t */\n\tfunction computeInputData(manager, input) {\n\t    var session = manager.session;\n\t    var pointers = input.pointers;\n\t    var pointersLength = pointers.length;\n\t\n\t    // store the first input to calculate the distance and direction\n\t    if (!session.firstInput) {\n\t        session.firstInput = simpleCloneInputData(input);\n\t    }\n\t\n\t    // to compute scale and rotation we need to store the multiple touches\n\t    if (pointersLength > 1 && !session.firstMultiple) {\n\t        session.firstMultiple = simpleCloneInputData(input);\n\t    } else if (pointersLength === 1) {\n\t        session.firstMultiple = false;\n\t    }\n\t\n\t    var firstInput = session.firstInput;\n\t    var firstMultiple = session.firstMultiple;\n\t    var offsetCenter = firstMultiple ? firstMultiple.center : firstInput.center;\n\t\n\t    var center = input.center = getCenter(pointers);\n\t    input.timeStamp = now();\n\t    input.deltaTime = input.timeStamp - firstInput.timeStamp;\n\t\n\t    input.angle = getAngle(offsetCenter, center);\n\t    input.distance = getDistance(offsetCenter, center);\n\t\n\t    computeDeltaXY(session, input);\n\t    input.offsetDirection = getDirection(input.deltaX, input.deltaY);\n\t\n\t    var overallVelocity = getVelocity(input.deltaTime, input.deltaX, input.deltaY);\n\t    input.overallVelocityX = overallVelocity.x;\n\t    input.overallVelocityY = overallVelocity.y;\n\t    input.overallVelocity = (abs(overallVelocity.x) > abs(overallVelocity.y)) ? overallVelocity.x : overallVelocity.y;\n\t\n\t    input.scale = firstMultiple ? getScale(firstMultiple.pointers, pointers) : 1;\n\t    input.rotation = firstMultiple ? getRotation(firstMultiple.pointers, pointers) : 0;\n\t\n\t    input.maxPointers = !session.prevInput ? input.pointers.length : ((input.pointers.length >\n\t        session.prevInput.maxPointers) ? input.pointers.length : session.prevInput.maxPointers);\n\t\n\t    computeIntervalInputData(session, input);\n\t\n\t    // find the correct target\n\t    var target = manager.element;\n\t    if (hasParent(input.srcEvent.target, target)) {\n\t        target = input.srcEvent.target;\n\t    }\n\t    input.target = target;\n\t}\n\t\n\tfunction computeDeltaXY(session, input) {\n\t    var center = input.center;\n\t    var offset = session.offsetDelta || {};\n\t    var prevDelta = session.prevDelta || {};\n\t    var prevInput = session.prevInput || {};\n\t\n\t    if (input.eventType === INPUT_START || prevInput.eventType === INPUT_END) {\n\t        prevDelta = session.prevDelta = {\n\t            x: prevInput.deltaX || 0,\n\t            y: prevInput.deltaY || 0\n\t        };\n\t\n\t        offset = session.offsetDelta = {\n\t            x: center.x,\n\t            y: center.y\n\t        };\n\t    }\n\t\n\t    input.deltaX = prevDelta.x + (center.x - offset.x);\n\t    input.deltaY = prevDelta.y + (center.y - offset.y);\n\t}\n\t\n\t/**\n\t * velocity is calculated every x ms\n\t * @param {Object} session\n\t * @param {Object} input\n\t */\n\tfunction computeIntervalInputData(session, input) {\n\t    var last = session.lastInterval || input,\n\t        deltaTime = input.timeStamp - last.timeStamp,\n\t        velocity, velocityX, velocityY, direction;\n\t\n\t    if (input.eventType != INPUT_CANCEL && (deltaTime > COMPUTE_INTERVAL || last.velocity === undefined)) {\n\t        var deltaX = input.deltaX - last.deltaX;\n\t        var deltaY = input.deltaY - last.deltaY;\n\t\n\t        var v = getVelocity(deltaTime, deltaX, deltaY);\n\t        velocityX = v.x;\n\t        velocityY = v.y;\n\t        velocity = (abs(v.x) > abs(v.y)) ? v.x : v.y;\n\t        direction = getDirection(deltaX, deltaY);\n\t\n\t        session.lastInterval = input;\n\t    } else {\n\t        // use latest velocity info if it doesn't overtake a minimum period\n\t        velocity = last.velocity;\n\t        velocityX = last.velocityX;\n\t        velocityY = last.velocityY;\n\t        direction = last.direction;\n\t    }\n\t\n\t    input.velocity = velocity;\n\t    input.velocityX = velocityX;\n\t    input.velocityY = velocityY;\n\t    input.direction = direction;\n\t}\n\t\n\t/**\n\t * create a simple clone from the input used for storage of firstInput and firstMultiple\n\t * @param {Object} input\n\t * @returns {Object} clonedInputData\n\t */\n\tfunction simpleCloneInputData(input) {\n\t    // make a simple copy of the pointers because we will get a reference if we don't\n\t    // we only need clientXY for the calculations\n\t    var pointers = [];\n\t    var i = 0;\n\t    while (i < input.pointers.length) {\n\t        pointers[i] = {\n\t            clientX: round(input.pointers[i].clientX),\n\t            clientY: round(input.pointers[i].clientY)\n\t        };\n\t        i++;\n\t    }\n\t\n\t    return {\n\t        timeStamp: now(),\n\t        pointers: pointers,\n\t        center: getCenter(pointers),\n\t        deltaX: input.deltaX,\n\t        deltaY: input.deltaY\n\t    };\n\t}\n\t\n\t/**\n\t * get the center of all the pointers\n\t * @param {Array} pointers\n\t * @return {Object} center contains `x` and `y` properties\n\t */\n\tfunction getCenter(pointers) {\n\t    var pointersLength = pointers.length;\n\t\n\t    // no need to loop when only one touch\n\t    if (pointersLength === 1) {\n\t        return {\n\t            x: round(pointers[0].clientX),\n\t            y: round(pointers[0].clientY)\n\t        };\n\t    }\n\t\n\t    var x = 0, y = 0, i = 0;\n\t    while (i < pointersLength) {\n\t        x += pointers[i].clientX;\n\t        y += pointers[i].clientY;\n\t        i++;\n\t    }\n\t\n\t    return {\n\t        x: round(x / pointersLength),\n\t        y: round(y / pointersLength)\n\t    };\n\t}\n\t\n\t/**\n\t * calculate the velocity between two points. unit is in px per ms.\n\t * @param {Number} deltaTime\n\t * @param {Number} x\n\t * @param {Number} y\n\t * @return {Object} velocity `x` and `y`\n\t */\n\tfunction getVelocity(deltaTime, x, y) {\n\t    return {\n\t        x: x / deltaTime || 0,\n\t        y: y / deltaTime || 0\n\t    };\n\t}\n\t\n\t/**\n\t * get the direction between two points\n\t * @param {Number} x\n\t * @param {Number} y\n\t * @return {Number} direction\n\t */\n\tfunction getDirection(x, y) {\n\t    if (x === y) {\n\t        return DIRECTION_NONE;\n\t    }\n\t\n\t    if (abs(x) >= abs(y)) {\n\t        return x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;\n\t    }\n\t    return y < 0 ? DIRECTION_UP : DIRECTION_DOWN;\n\t}\n\t\n\t/**\n\t * calculate the absolute distance between two points\n\t * @param {Object} p1 {x, y}\n\t * @param {Object} p2 {x, y}\n\t * @param {Array} [props] containing x and y keys\n\t * @return {Number} distance\n\t */\n\tfunction getDistance(p1, p2, props) {\n\t    if (!props) {\n\t        props = PROPS_XY;\n\t    }\n\t    var x = p2[props[0]] - p1[props[0]],\n\t        y = p2[props[1]] - p1[props[1]];\n\t\n\t    return Math.sqrt((x * x) + (y * y));\n\t}\n\t\n\t/**\n\t * calculate the angle between two coordinates\n\t * @param {Object} p1\n\t * @param {Object} p2\n\t * @param {Array} [props] containing x and y keys\n\t * @return {Number} angle\n\t */\n\tfunction getAngle(p1, p2, props) {\n\t    if (!props) {\n\t        props = PROPS_XY;\n\t    }\n\t    var x = p2[props[0]] - p1[props[0]],\n\t        y = p2[props[1]] - p1[props[1]];\n\t    return Math.atan2(y, x) * 180 / Math.PI;\n\t}\n\t\n\t/**\n\t * calculate the rotation degrees between two pointersets\n\t * @param {Array} start array of pointers\n\t * @param {Array} end array of pointers\n\t * @return {Number} rotation\n\t */\n\tfunction getRotation(start, end) {\n\t    return getAngle(end[1], end[0], PROPS_CLIENT_XY) + getAngle(start[1], start[0], PROPS_CLIENT_XY);\n\t}\n\t\n\t/**\n\t * calculate the scale factor between two pointersets\n\t * no scale is 1, and goes down to 0 when pinched together, and bigger when pinched out\n\t * @param {Array} start array of pointers\n\t * @param {Array} end array of pointers\n\t * @return {Number} scale\n\t */\n\tfunction getScale(start, end) {\n\t    return getDistance(end[0], end[1], PROPS_CLIENT_XY) / getDistance(start[0], start[1], PROPS_CLIENT_XY);\n\t}\n\t\n\tvar MOUSE_INPUT_MAP = {\n\t    mousedown: INPUT_START,\n\t    mousemove: INPUT_MOVE,\n\t    mouseup: INPUT_END\n\t};\n\t\n\tvar MOUSE_ELEMENT_EVENTS = 'mousedown';\n\tvar MOUSE_WINDOW_EVENTS = 'mousemove mouseup';\n\t\n\t/**\n\t * Mouse events input\n\t * @constructor\n\t * @extends Input\n\t */\n\tfunction MouseInput() {\n\t    this.evEl = MOUSE_ELEMENT_EVENTS;\n\t    this.evWin = MOUSE_WINDOW_EVENTS;\n\t\n\t    this.pressed = false; // mousedown state\n\t\n\t    Input.apply(this, arguments);\n\t}\n\t\n\tinherit(MouseInput, Input, {\n\t    /**\n\t     * handle mouse events\n\t     * @param {Object} ev\n\t     */\n\t    handler: function MEhandler(ev) {\n\t        var eventType = MOUSE_INPUT_MAP[ev.type];\n\t\n\t        // on start we want to have the left mouse button down\n\t        if (eventType & INPUT_START && ev.button === 0) {\n\t            this.pressed = true;\n\t        }\n\t\n\t        if (eventType & INPUT_MOVE && ev.which !== 1) {\n\t            eventType = INPUT_END;\n\t        }\n\t\n\t        // mouse must be down\n\t        if (!this.pressed) {\n\t            return;\n\t        }\n\t\n\t        if (eventType & INPUT_END) {\n\t            this.pressed = false;\n\t        }\n\t\n\t        this.callback(this.manager, eventType, {\n\t            pointers: [ev],\n\t            changedPointers: [ev],\n\t            pointerType: INPUT_TYPE_MOUSE,\n\t            srcEvent: ev\n\t        });\n\t    }\n\t});\n\t\n\tvar POINTER_INPUT_MAP = {\n\t    pointerdown: INPUT_START,\n\t    pointermove: INPUT_MOVE,\n\t    pointerup: INPUT_END,\n\t    pointercancel: INPUT_CANCEL,\n\t    pointerout: INPUT_CANCEL\n\t};\n\t\n\t// in IE10 the pointer types is defined as an enum\n\tvar IE10_POINTER_TYPE_ENUM = {\n\t    2: INPUT_TYPE_TOUCH,\n\t    3: INPUT_TYPE_PEN,\n\t    4: INPUT_TYPE_MOUSE,\n\t    5: INPUT_TYPE_KINECT // see https://twitter.com/jacobrossi/status/480596438489890816\n\t};\n\t\n\tvar POINTER_ELEMENT_EVENTS = 'pointerdown';\n\tvar POINTER_WINDOW_EVENTS = 'pointermove pointerup pointercancel';\n\t\n\t// IE10 has prefixed support, and case-sensitive\n\tif (window.MSPointerEvent && !window.PointerEvent) {\n\t    POINTER_ELEMENT_EVENTS = 'MSPointerDown';\n\t    POINTER_WINDOW_EVENTS = 'MSPointerMove MSPointerUp MSPointerCancel';\n\t}\n\t\n\t/**\n\t * Pointer events input\n\t * @constructor\n\t * @extends Input\n\t */\n\tfunction PointerEventInput() {\n\t    this.evEl = POINTER_ELEMENT_EVENTS;\n\t    this.evWin = POINTER_WINDOW_EVENTS;\n\t\n\t    Input.apply(this, arguments);\n\t\n\t    this.store = (this.manager.session.pointerEvents = []);\n\t}\n\t\n\tinherit(PointerEventInput, Input, {\n\t    /**\n\t     * handle mouse events\n\t     * @param {Object} ev\n\t     */\n\t    handler: function PEhandler(ev) {\n\t        var store = this.store;\n\t        var removePointer = false;\n\t\n\t        var eventTypeNormalized = ev.type.toLowerCase().replace('ms', '');\n\t        var eventType = POINTER_INPUT_MAP[eventTypeNormalized];\n\t        var pointerType = IE10_POINTER_TYPE_ENUM[ev.pointerType] || ev.pointerType;\n\t\n\t        var isTouch = (pointerType == INPUT_TYPE_TOUCH);\n\t\n\t        // get index of the event in the store\n\t        var storeIndex = inArray(store, ev.pointerId, 'pointerId');\n\t\n\t        // start and mouse must be down\n\t        if (eventType & INPUT_START && (ev.button === 0 || isTouch)) {\n\t            if (storeIndex < 0) {\n\t                store.push(ev);\n\t                storeIndex = store.length - 1;\n\t            }\n\t        } else if (eventType & (INPUT_END | INPUT_CANCEL)) {\n\t            removePointer = true;\n\t        }\n\t\n\t        // it not found, so the pointer hasn't been down (so it's probably a hover)\n\t        if (storeIndex < 0) {\n\t            return;\n\t        }\n\t\n\t        // update the event in the store\n\t        store[storeIndex] = ev;\n\t\n\t        this.callback(this.manager, eventType, {\n\t            pointers: store,\n\t            changedPointers: [ev],\n\t            pointerType: pointerType,\n\t            srcEvent: ev\n\t        });\n\t\n\t        if (removePointer) {\n\t            // remove from the store\n\t            store.splice(storeIndex, 1);\n\t        }\n\t    }\n\t});\n\t\n\tvar SINGLE_TOUCH_INPUT_MAP = {\n\t    touchstart: INPUT_START,\n\t    touchmove: INPUT_MOVE,\n\t    touchend: INPUT_END,\n\t    touchcancel: INPUT_CANCEL\n\t};\n\t\n\tvar SINGLE_TOUCH_TARGET_EVENTS = 'touchstart';\n\tvar SINGLE_TOUCH_WINDOW_EVENTS = 'touchstart touchmove touchend touchcancel';\n\t\n\t/**\n\t * Touch events input\n\t * @constructor\n\t * @extends Input\n\t */\n\tfunction SingleTouchInput() {\n\t    this.evTarget = SINGLE_TOUCH_TARGET_EVENTS;\n\t    this.evWin = SINGLE_TOUCH_WINDOW_EVENTS;\n\t    this.started = false;\n\t\n\t    Input.apply(this, arguments);\n\t}\n\t\n\tinherit(SingleTouchInput, Input, {\n\t    handler: function TEhandler(ev) {\n\t        var type = SINGLE_TOUCH_INPUT_MAP[ev.type];\n\t\n\t        // should we handle the touch events?\n\t        if (type === INPUT_START) {\n\t            this.started = true;\n\t        }\n\t\n\t        if (!this.started) {\n\t            return;\n\t        }\n\t\n\t        var touches = normalizeSingleTouches.call(this, ev, type);\n\t\n\t        // when done, reset the started state\n\t        if (type & (INPUT_END | INPUT_CANCEL) && touches[0].length - touches[1].length === 0) {\n\t            this.started = false;\n\t        }\n\t\n\t        this.callback(this.manager, type, {\n\t            pointers: touches[0],\n\t            changedPointers: touches[1],\n\t            pointerType: INPUT_TYPE_TOUCH,\n\t            srcEvent: ev\n\t        });\n\t    }\n\t});\n\t\n\t/**\n\t * @this {TouchInput}\n\t * @param {Object} ev\n\t * @param {Number} type flag\n\t * @returns {undefined|Array} [all, changed]\n\t */\n\tfunction normalizeSingleTouches(ev, type) {\n\t    var all = toArray(ev.touches);\n\t    var changed = toArray(ev.changedTouches);\n\t\n\t    if (type & (INPUT_END | INPUT_CANCEL)) {\n\t        all = uniqueArray(all.concat(changed), 'identifier', true);\n\t    }\n\t\n\t    return [all, changed];\n\t}\n\t\n\tvar TOUCH_INPUT_MAP = {\n\t    touchstart: INPUT_START,\n\t    touchmove: INPUT_MOVE,\n\t    touchend: INPUT_END,\n\t    touchcancel: INPUT_CANCEL\n\t};\n\t\n\tvar TOUCH_TARGET_EVENTS = 'touchstart touchmove touchend touchcancel';\n\t\n\t/**\n\t * Multi-user touch events input\n\t * @constructor\n\t * @extends Input\n\t */\n\tfunction TouchInput() {\n\t    this.evTarget = TOUCH_TARGET_EVENTS;\n\t    this.targetIds = {};\n\t\n\t    Input.apply(this, arguments);\n\t}\n\t\n\tinherit(TouchInput, Input, {\n\t    handler: function MTEhandler(ev) {\n\t        var type = TOUCH_INPUT_MAP[ev.type];\n\t        var touches = getTouches.call(this, ev, type);\n\t        if (!touches) {\n\t            return;\n\t        }\n\t\n\t        this.callback(this.manager, type, {\n\t            pointers: touches[0],\n\t            changedPointers: touches[1],\n\t            pointerType: INPUT_TYPE_TOUCH,\n\t            srcEvent: ev\n\t        });\n\t    }\n\t});\n\t\n\t/**\n\t * @this {TouchInput}\n\t * @param {Object} ev\n\t * @param {Number} type flag\n\t * @returns {undefined|Array} [all, changed]\n\t */\n\tfunction getTouches(ev, type) {\n\t    var allTouches = toArray(ev.touches);\n\t    var targetIds = this.targetIds;\n\t\n\t    // when there is only one touch, the process can be simplified\n\t    if (type & (INPUT_START | INPUT_MOVE) && allTouches.length === 1) {\n\t        targetIds[allTouches[0].identifier] = true;\n\t        return [allTouches, allTouches];\n\t    }\n\t\n\t    var i,\n\t        targetTouches,\n\t        changedTouches = toArray(ev.changedTouches),\n\t        changedTargetTouches = [],\n\t        target = this.target;\n\t\n\t    // get target touches from touches\n\t    targetTouches = allTouches.filter(function(touch) {\n\t        return hasParent(touch.target, target);\n\t    });\n\t\n\t    // collect touches\n\t    if (type === INPUT_START) {\n\t        i = 0;\n\t        while (i < targetTouches.length) {\n\t            targetIds[targetTouches[i].identifier] = true;\n\t            i++;\n\t        }\n\t    }\n\t\n\t    // filter changed touches to only contain touches that exist in the collected target ids\n\t    i = 0;\n\t    while (i < changedTouches.length) {\n\t        if (targetIds[changedTouches[i].identifier]) {\n\t            changedTargetTouches.push(changedTouches[i]);\n\t        }\n\t\n\t        // cleanup removed touches\n\t        if (type & (INPUT_END | INPUT_CANCEL)) {\n\t            delete targetIds[changedTouches[i].identifier];\n\t        }\n\t        i++;\n\t    }\n\t\n\t    if (!changedTargetTouches.length) {\n\t        return;\n\t    }\n\t\n\t    return [\n\t        // merge targetTouches with changedTargetTouches so it contains ALL touches, including 'end' and 'cancel'\n\t        uniqueArray(targetTouches.concat(changedTargetTouches), 'identifier', true),\n\t        changedTargetTouches\n\t    ];\n\t}\n\t\n\t/**\n\t * Combined touch and mouse input\n\t *\n\t * Touch has a higher priority then mouse, and while touching no mouse events are allowed.\n\t * This because touch devices also emit mouse events while doing a touch.\n\t *\n\t * @constructor\n\t * @extends Input\n\t */\n\t\n\tvar DEDUP_TIMEOUT = 2500;\n\tvar DEDUP_DISTANCE = 25;\n\t\n\tfunction TouchMouseInput() {\n\t    Input.apply(this, arguments);\n\t\n\t    var handler = bindFn(this.handler, this);\n\t    this.touch = new TouchInput(this.manager, handler);\n\t    this.mouse = new MouseInput(this.manager, handler);\n\t\n\t    this.primaryTouch = null;\n\t    this.lastTouches = [];\n\t}\n\t\n\tinherit(TouchMouseInput, Input, {\n\t    /**\n\t     * handle mouse and touch events\n\t     * @param {Hammer} manager\n\t     * @param {String} inputEvent\n\t     * @param {Object} inputData\n\t     */\n\t    handler: function TMEhandler(manager, inputEvent, inputData) {\n\t        var isTouch = (inputData.pointerType == INPUT_TYPE_TOUCH),\n\t            isMouse = (inputData.pointerType == INPUT_TYPE_MOUSE);\n\t\n\t        if (isMouse && inputData.sourceCapabilities && inputData.sourceCapabilities.firesTouchEvents) {\n\t            return;\n\t        }\n\t\n\t        // when we're in a touch event, record touches to  de-dupe synthetic mouse event\n\t        if (isTouch) {\n\t            recordTouches.call(this, inputEvent, inputData);\n\t        } else if (isMouse && isSyntheticEvent.call(this, inputData)) {\n\t            return;\n\t        }\n\t\n\t        this.callback(manager, inputEvent, inputData);\n\t    },\n\t\n\t    /**\n\t     * remove the event listeners\n\t     */\n\t    destroy: function destroy() {\n\t        this.touch.destroy();\n\t        this.mouse.destroy();\n\t    }\n\t});\n\t\n\tfunction recordTouches(eventType, eventData) {\n\t    if (eventType & INPUT_START) {\n\t        this.primaryTouch = eventData.changedPointers[0].identifier;\n\t        setLastTouch.call(this, eventData);\n\t    } else if (eventType & (INPUT_END | INPUT_CANCEL)) {\n\t        setLastTouch.call(this, eventData);\n\t    }\n\t}\n\t\n\tfunction setLastTouch(eventData) {\n\t    var touch = eventData.changedPointers[0];\n\t\n\t    if (touch.identifier === this.primaryTouch) {\n\t        var lastTouch = {x: touch.clientX, y: touch.clientY};\n\t        this.lastTouches.push(lastTouch);\n\t        var lts = this.lastTouches;\n\t        var removeLastTouch = function() {\n\t            var i = lts.indexOf(lastTouch);\n\t            if (i > -1) {\n\t                lts.splice(i, 1);\n\t            }\n\t        };\n\t        setTimeout(removeLastTouch, DEDUP_TIMEOUT);\n\t    }\n\t}\n\t\n\tfunction isSyntheticEvent(eventData) {\n\t    var x = eventData.srcEvent.clientX, y = eventData.srcEvent.clientY;\n\t    for (var i = 0; i < this.lastTouches.length; i++) {\n\t        var t = this.lastTouches[i];\n\t        var dx = Math.abs(x - t.x), dy = Math.abs(y - t.y);\n\t        if (dx <= DEDUP_DISTANCE && dy <= DEDUP_DISTANCE) {\n\t            return true;\n\t        }\n\t    }\n\t    return false;\n\t}\n\t\n\tvar PREFIXED_TOUCH_ACTION = prefixed(TEST_ELEMENT.style, 'touchAction');\n\tvar NATIVE_TOUCH_ACTION = PREFIXED_TOUCH_ACTION !== undefined;\n\t\n\t// magical touchAction value\n\tvar TOUCH_ACTION_COMPUTE = 'compute';\n\tvar TOUCH_ACTION_AUTO = 'auto';\n\tvar TOUCH_ACTION_MANIPULATION = 'manipulation'; // not implemented\n\tvar TOUCH_ACTION_NONE = 'none';\n\tvar TOUCH_ACTION_PAN_X = 'pan-x';\n\tvar TOUCH_ACTION_PAN_Y = 'pan-y';\n\tvar TOUCH_ACTION_MAP = getTouchActionProps();\n\t\n\t/**\n\t * Touch Action\n\t * sets the touchAction property or uses the js alternative\n\t * @param {Manager} manager\n\t * @param {String} value\n\t * @constructor\n\t */\n\tfunction TouchAction(manager, value) {\n\t    this.manager = manager;\n\t    this.set(value);\n\t}\n\t\n\tTouchAction.prototype = {\n\t    /**\n\t     * set the touchAction value on the element or enable the polyfill\n\t     * @param {String} value\n\t     */\n\t    set: function(value) {\n\t        // find out the touch-action by the event handlers\n\t        if (value == TOUCH_ACTION_COMPUTE) {\n\t            value = this.compute();\n\t        }\n\t\n\t        if (NATIVE_TOUCH_ACTION && this.manager.element.style && TOUCH_ACTION_MAP[value]) {\n\t            this.manager.element.style[PREFIXED_TOUCH_ACTION] = value;\n\t        }\n\t        this.actions = value.toLowerCase().trim();\n\t    },\n\t\n\t    /**\n\t     * just re-set the touchAction value\n\t     */\n\t    update: function() {\n\t        this.set(this.manager.options.touchAction);\n\t    },\n\t\n\t    /**\n\t     * compute the value for the touchAction property based on the recognizer's settings\n\t     * @returns {String} value\n\t     */\n\t    compute: function() {\n\t        var actions = [];\n\t        each(this.manager.recognizers, function(recognizer) {\n\t            if (boolOrFn(recognizer.options.enable, [recognizer])) {\n\t                actions = actions.concat(recognizer.getTouchAction());\n\t            }\n\t        });\n\t        return cleanTouchActions(actions.join(' '));\n\t    },\n\t\n\t    /**\n\t     * this method is called on each input cycle and provides the preventing of the browser behavior\n\t     * @param {Object} input\n\t     */\n\t    preventDefaults: function(input) {\n\t        var srcEvent = input.srcEvent;\n\t        var direction = input.offsetDirection;\n\t\n\t        // if the touch action did prevented once this session\n\t        if (this.manager.session.prevented) {\n\t            srcEvent.preventDefault();\n\t            return;\n\t        }\n\t\n\t        var actions = this.actions;\n\t        var hasNone = inStr(actions, TOUCH_ACTION_NONE) && !TOUCH_ACTION_MAP[TOUCH_ACTION_NONE];\n\t        var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_Y];\n\t        var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_X];\n\t\n\t        if (hasNone) {\n\t            //do not prevent defaults if this is a tap gesture\n\t\n\t            var isTapPointer = input.pointers.length === 1;\n\t            var isTapMovement = input.distance < 2;\n\t            var isTapTouchTime = input.deltaTime < 250;\n\t\n\t            if (isTapPointer && isTapMovement && isTapTouchTime) {\n\t                return;\n\t            }\n\t        }\n\t\n\t        if (hasPanX && hasPanY) {\n\t            // `pan-x pan-y` means browser handles all scrolling/panning, do not prevent\n\t            return;\n\t        }\n\t\n\t        if (hasNone ||\n\t            (hasPanY && direction & DIRECTION_HORIZONTAL) ||\n\t            (hasPanX && direction & DIRECTION_VERTICAL)) {\n\t            return this.preventSrc(srcEvent);\n\t        }\n\t    },\n\t\n\t    /**\n\t     * call preventDefault to prevent the browser's default behavior (scrolling in most cases)\n\t     * @param {Object} srcEvent\n\t     */\n\t    preventSrc: function(srcEvent) {\n\t        this.manager.session.prevented = true;\n\t        srcEvent.preventDefault();\n\t    }\n\t};\n\t\n\t/**\n\t * when the touchActions are collected they are not a valid value, so we need to clean things up. *\n\t * @param {String} actions\n\t * @returns {*}\n\t */\n\tfunction cleanTouchActions(actions) {\n\t    // none\n\t    if (inStr(actions, TOUCH_ACTION_NONE)) {\n\t        return TOUCH_ACTION_NONE;\n\t    }\n\t\n\t    var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X);\n\t    var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y);\n\t\n\t    // if both pan-x and pan-y are set (different recognizers\n\t    // for different directions, e.g. horizontal pan but vertical swipe?)\n\t    // we need none (as otherwise with pan-x pan-y combined none of these\n\t    // recognizers will work, since the browser would handle all panning\n\t    if (hasPanX && hasPanY) {\n\t        return TOUCH_ACTION_NONE;\n\t    }\n\t\n\t    // pan-x OR pan-y\n\t    if (hasPanX || hasPanY) {\n\t        return hasPanX ? TOUCH_ACTION_PAN_X : TOUCH_ACTION_PAN_Y;\n\t    }\n\t\n\t    // manipulation\n\t    if (inStr(actions, TOUCH_ACTION_MANIPULATION)) {\n\t        return TOUCH_ACTION_MANIPULATION;\n\t    }\n\t\n\t    return TOUCH_ACTION_AUTO;\n\t}\n\t\n\tfunction getTouchActionProps() {\n\t    if (!NATIVE_TOUCH_ACTION) {\n\t        return false;\n\t    }\n\t    var touchMap = {};\n\t    var cssSupports = window.CSS && window.CSS.supports;\n\t    ['auto', 'manipulation', 'pan-y', 'pan-x', 'pan-x pan-y', 'none'].forEach(function(val) {\n\t\n\t        // If css.supports is not supported but there is native touch-action assume it supports\n\t        // all values. This is the case for IE 10 and 11.\n\t        touchMap[val] = cssSupports ? window.CSS.supports('touch-action', val) : true;\n\t    });\n\t    return touchMap;\n\t}\n\t\n\t/**\n\t * Recognizer flow explained; *\n\t * All recognizers have the initial state of POSSIBLE when a input session starts.\n\t * The definition of a input session is from the first input until the last input, with all it's movement in it. *\n\t * Example session for mouse-input: mousedown -> mousemove -> mouseup\n\t *\n\t * On each recognizing cycle (see Manager.recognize) the .recognize() method is executed\n\t * which determines with state it should be.\n\t *\n\t * If the recognizer has the state FAILED, CANCELLED or RECOGNIZED (equals ENDED), it is reset to\n\t * POSSIBLE to give it another change on the next cycle.\n\t *\n\t *               Possible\n\t *                  |\n\t *            +-----+---------------+\n\t *            |                     |\n\t *      +-----+-----+               |\n\t *      |           |               |\n\t *   Failed      Cancelled          |\n\t *                          +-------+------+\n\t *                          |              |\n\t *                      Recognized       Began\n\t *                                         |\n\t *                                      Changed\n\t *                                         |\n\t *                                  Ended/Recognized\n\t */\n\tvar STATE_POSSIBLE = 1;\n\tvar STATE_BEGAN = 2;\n\tvar STATE_CHANGED = 4;\n\tvar STATE_ENDED = 8;\n\tvar STATE_RECOGNIZED = STATE_ENDED;\n\tvar STATE_CANCELLED = 16;\n\tvar STATE_FAILED = 32;\n\t\n\t/**\n\t * Recognizer\n\t * Every recognizer needs to extend from this class.\n\t * @constructor\n\t * @param {Object} options\n\t */\n\tfunction Recognizer(options) {\n\t    this.options = assign({}, this.defaults, options || {});\n\t\n\t    this.id = uniqueId();\n\t\n\t    this.manager = null;\n\t\n\t    // default is enable true\n\t    this.options.enable = ifUndefined(this.options.enable, true);\n\t\n\t    this.state = STATE_POSSIBLE;\n\t\n\t    this.simultaneous = {};\n\t    this.requireFail = [];\n\t}\n\t\n\tRecognizer.prototype = {\n\t    /**\n\t     * @virtual\n\t     * @type {Object}\n\t     */\n\t    defaults: {},\n\t\n\t    /**\n\t     * set options\n\t     * @param {Object} options\n\t     * @return {Recognizer}\n\t     */\n\t    set: function(options) {\n\t        assign(this.options, options);\n\t\n\t        // also update the touchAction, in case something changed about the directions/enabled state\n\t        this.manager && this.manager.touchAction.update();\n\t        return this;\n\t    },\n\t\n\t    /**\n\t     * recognize simultaneous with an other recognizer.\n\t     * @param {Recognizer} otherRecognizer\n\t     * @returns {Recognizer} this\n\t     */\n\t    recognizeWith: function(otherRecognizer) {\n\t        if (invokeArrayArg(otherRecognizer, 'recognizeWith', this)) {\n\t            return this;\n\t        }\n\t\n\t        var simultaneous = this.simultaneous;\n\t        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n\t        if (!simultaneous[otherRecognizer.id]) {\n\t            simultaneous[otherRecognizer.id] = otherRecognizer;\n\t            otherRecognizer.recognizeWith(this);\n\t        }\n\t        return this;\n\t    },\n\t\n\t    /**\n\t     * drop the simultaneous link. it doesnt remove the link on the other recognizer.\n\t     * @param {Recognizer} otherRecognizer\n\t     * @returns {Recognizer} this\n\t     */\n\t    dropRecognizeWith: function(otherRecognizer) {\n\t        if (invokeArrayArg(otherRecognizer, 'dropRecognizeWith', this)) {\n\t            return this;\n\t        }\n\t\n\t        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n\t        delete this.simultaneous[otherRecognizer.id];\n\t        return this;\n\t    },\n\t\n\t    /**\n\t     * recognizer can only run when an other is failing\n\t     * @param {Recognizer} otherRecognizer\n\t     * @returns {Recognizer} this\n\t     */\n\t    requireFailure: function(otherRecognizer) {\n\t        if (invokeArrayArg(otherRecognizer, 'requireFailure', this)) {\n\t            return this;\n\t        }\n\t\n\t        var requireFail = this.requireFail;\n\t        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n\t        if (inArray(requireFail, otherRecognizer) === -1) {\n\t            requireFail.push(otherRecognizer);\n\t            otherRecognizer.requireFailure(this);\n\t        }\n\t        return this;\n\t    },\n\t\n\t    /**\n\t     * drop the requireFailure link. it does not remove the link on the other recognizer.\n\t     * @param {Recognizer} otherRecognizer\n\t     * @returns {Recognizer} this\n\t     */\n\t    dropRequireFailure: function(otherRecognizer) {\n\t        if (invokeArrayArg(otherRecognizer, 'dropRequireFailure', this)) {\n\t            return this;\n\t        }\n\t\n\t        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n\t        var index = inArray(this.requireFail, otherRecognizer);\n\t        if (index > -1) {\n\t            this.requireFail.splice(index, 1);\n\t        }\n\t        return this;\n\t    },\n\t\n\t    /**\n\t     * has require failures boolean\n\t     * @returns {boolean}\n\t     */\n\t    hasRequireFailures: function() {\n\t        return this.requireFail.length > 0;\n\t    },\n\t\n\t    /**\n\t     * if the recognizer can recognize simultaneous with an other recognizer\n\t     * @param {Recognizer} otherRecognizer\n\t     * @returns {Boolean}\n\t     */\n\t    canRecognizeWith: function(otherRecognizer) {\n\t        return !!this.simultaneous[otherRecognizer.id];\n\t    },\n\t\n\t    /**\n\t     * You should use `tryEmit` instead of `emit` directly to check\n\t     * that all the needed recognizers has failed before emitting.\n\t     * @param {Object} input\n\t     */\n\t    emit: function(input) {\n\t        var self = this;\n\t        var state = this.state;\n\t\n\t        function emit(event) {\n\t            self.manager.emit(event, input);\n\t        }\n\t\n\t        // 'panstart' and 'panmove'\n\t        if (state < STATE_ENDED) {\n\t            emit(self.options.event + stateStr(state));\n\t        }\n\t\n\t        emit(self.options.event); // simple 'eventName' events\n\t\n\t        if (input.additionalEvent) { // additional event(panleft, panright, pinchin, pinchout...)\n\t            emit(input.additionalEvent);\n\t        }\n\t\n\t        // panend and pancancel\n\t        if (state >= STATE_ENDED) {\n\t            emit(self.options.event + stateStr(state));\n\t        }\n\t    },\n\t\n\t    /**\n\t     * Check that all the require failure recognizers has failed,\n\t     * if true, it emits a gesture event,\n\t     * otherwise, setup the state to FAILED.\n\t     * @param {Object} input\n\t     */\n\t    tryEmit: function(input) {\n\t        if (this.canEmit()) {\n\t            return this.emit(input);\n\t        }\n\t        // it's failing anyway\n\t        this.state = STATE_FAILED;\n\t    },\n\t\n\t    /**\n\t     * can we emit?\n\t     * @returns {boolean}\n\t     */\n\t    canEmit: function() {\n\t        var i = 0;\n\t        while (i < this.requireFail.length) {\n\t            if (!(this.requireFail[i].state & (STATE_FAILED | STATE_POSSIBLE))) {\n\t                return false;\n\t            }\n\t            i++;\n\t        }\n\t        return true;\n\t    },\n\t\n\t    /**\n\t     * update the recognizer\n\t     * @param {Object} inputData\n\t     */\n\t    recognize: function(inputData) {\n\t        // make a new copy of the inputData\n\t        // so we can change the inputData without messing up the other recognizers\n\t        var inputDataClone = assign({}, inputData);\n\t\n\t        // is is enabled and allow recognizing?\n\t        if (!boolOrFn(this.options.enable, [this, inputDataClone])) {\n\t            this.reset();\n\t            this.state = STATE_FAILED;\n\t            return;\n\t        }\n\t\n\t        // reset when we've reached the end\n\t        if (this.state & (STATE_RECOGNIZED | STATE_CANCELLED | STATE_FAILED)) {\n\t            this.state = STATE_POSSIBLE;\n\t        }\n\t\n\t        this.state = this.process(inputDataClone);\n\t\n\t        // the recognizer has recognized a gesture\n\t        // so trigger an event\n\t        if (this.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED | STATE_CANCELLED)) {\n\t            this.tryEmit(inputDataClone);\n\t        }\n\t    },\n\t\n\t    /**\n\t     * return the state of the recognizer\n\t     * the actual recognizing happens in this method\n\t     * @virtual\n\t     * @param {Object} inputData\n\t     * @returns {Const} STATE\n\t     */\n\t    process: function(inputData) { }, // jshint ignore:line\n\t\n\t    /**\n\t     * return the preferred touch-action\n\t     * @virtual\n\t     * @returns {Array}\n\t     */\n\t    getTouchAction: function() { },\n\t\n\t    /**\n\t     * called when the gesture isn't allowed to recognize\n\t     * like when another is being recognized or it is disabled\n\t     * @virtual\n\t     */\n\t    reset: function() { }\n\t};\n\t\n\t/**\n\t * get a usable string, used as event postfix\n\t * @param {Const} state\n\t * @returns {String} state\n\t */\n\tfunction stateStr(state) {\n\t    if (state & STATE_CANCELLED) {\n\t        return 'cancel';\n\t    } else if (state & STATE_ENDED) {\n\t        return 'end';\n\t    } else if (state & STATE_CHANGED) {\n\t        return 'move';\n\t    } else if (state & STATE_BEGAN) {\n\t        return 'start';\n\t    }\n\t    return '';\n\t}\n\t\n\t/**\n\t * direction cons to string\n\t * @param {Const} direction\n\t * @returns {String}\n\t */\n\tfunction directionStr(direction) {\n\t    if (direction == DIRECTION_DOWN) {\n\t        return 'down';\n\t    } else if (direction == DIRECTION_UP) {\n\t        return 'up';\n\t    } else if (direction == DIRECTION_LEFT) {\n\t        return 'left';\n\t    } else if (direction == DIRECTION_RIGHT) {\n\t        return 'right';\n\t    }\n\t    return '';\n\t}\n\t\n\t/**\n\t * get a recognizer by name if it is bound to a manager\n\t * @param {Recognizer|String} otherRecognizer\n\t * @param {Recognizer} recognizer\n\t * @returns {Recognizer}\n\t */\n\tfunction getRecognizerByNameIfManager(otherRecognizer, recognizer) {\n\t    var manager = recognizer.manager;\n\t    if (manager) {\n\t        return manager.get(otherRecognizer);\n\t    }\n\t    return otherRecognizer;\n\t}\n\t\n\t/**\n\t * This recognizer is just used as a base for the simple attribute recognizers.\n\t * @constructor\n\t * @extends Recognizer\n\t */\n\tfunction AttrRecognizer() {\n\t    Recognizer.apply(this, arguments);\n\t}\n\t\n\tinherit(AttrRecognizer, Recognizer, {\n\t    /**\n\t     * @namespace\n\t     * @memberof AttrRecognizer\n\t     */\n\t    defaults: {\n\t        /**\n\t         * @type {Number}\n\t         * @default 1\n\t         */\n\t        pointers: 1\n\t    },\n\t\n\t    /**\n\t     * Used to check if it the recognizer receives valid input, like input.distance > 10.\n\t     * @memberof AttrRecognizer\n\t     * @param {Object} input\n\t     * @returns {Boolean} recognized\n\t     */\n\t    attrTest: function(input) {\n\t        var optionPointers = this.options.pointers;\n\t        return optionPointers === 0 || input.pointers.length === optionPointers;\n\t    },\n\t\n\t    /**\n\t     * Process the input and return the state for the recognizer\n\t     * @memberof AttrRecognizer\n\t     * @param {Object} input\n\t     * @returns {*} State\n\t     */\n\t    process: function(input) {\n\t        var state = this.state;\n\t        var eventType = input.eventType;\n\t\n\t        var isRecognized = state & (STATE_BEGAN | STATE_CHANGED);\n\t        var isValid = this.attrTest(input);\n\t\n\t        // on cancel input and we've recognized before, return STATE_CANCELLED\n\t        if (isRecognized && (eventType & INPUT_CANCEL || !isValid)) {\n\t            return state | STATE_CANCELLED;\n\t        } else if (isRecognized || isValid) {\n\t            if (eventType & INPUT_END) {\n\t                return state | STATE_ENDED;\n\t            } else if (!(state & STATE_BEGAN)) {\n\t                return STATE_BEGAN;\n\t            }\n\t            return state | STATE_CHANGED;\n\t        }\n\t        return STATE_FAILED;\n\t    }\n\t});\n\t\n\t/**\n\t * Pan\n\t * Recognized when the pointer is down and moved in the allowed direction.\n\t * @constructor\n\t * @extends AttrRecognizer\n\t */\n\tfunction PanRecognizer() {\n\t    AttrRecognizer.apply(this, arguments);\n\t\n\t    this.pX = null;\n\t    this.pY = null;\n\t}\n\t\n\tinherit(PanRecognizer, AttrRecognizer, {\n\t    /**\n\t     * @namespace\n\t     * @memberof PanRecognizer\n\t     */\n\t    defaults: {\n\t        event: 'pan',\n\t        threshold: 10,\n\t        pointers: 1,\n\t        direction: DIRECTION_ALL\n\t    },\n\t\n\t    getTouchAction: function() {\n\t        var direction = this.options.direction;\n\t        var actions = [];\n\t        if (direction & DIRECTION_HORIZONTAL) {\n\t            actions.push(TOUCH_ACTION_PAN_Y);\n\t        }\n\t        if (direction & DIRECTION_VERTICAL) {\n\t            actions.push(TOUCH_ACTION_PAN_X);\n\t        }\n\t        return actions;\n\t    },\n\t\n\t    directionTest: function(input) {\n\t        var options = this.options;\n\t        var hasMoved = true;\n\t        var distance = input.distance;\n\t        var direction = input.direction;\n\t        var x = input.deltaX;\n\t        var y = input.deltaY;\n\t\n\t        // lock to axis?\n\t        if (!(direction & options.direction)) {\n\t            if (options.direction & DIRECTION_HORIZONTAL) {\n\t                direction = (x === 0) ? DIRECTION_NONE : (x < 0) ? DIRECTION_LEFT : DIRECTION_RIGHT;\n\t                hasMoved = x != this.pX;\n\t                distance = Math.abs(input.deltaX);\n\t            } else {\n\t                direction = (y === 0) ? DIRECTION_NONE : (y < 0) ? DIRECTION_UP : DIRECTION_DOWN;\n\t                hasMoved = y != this.pY;\n\t                distance = Math.abs(input.deltaY);\n\t            }\n\t        }\n\t        input.direction = direction;\n\t        return hasMoved && distance > options.threshold && direction & options.direction;\n\t    },\n\t\n\t    attrTest: function(input) {\n\t        return AttrRecognizer.prototype.attrTest.call(this, input) &&\n\t            (this.state & STATE_BEGAN || (!(this.state & STATE_BEGAN) && this.directionTest(input)));\n\t    },\n\t\n\t    emit: function(input) {\n\t\n\t        this.pX = input.deltaX;\n\t        this.pY = input.deltaY;\n\t\n\t        var direction = directionStr(input.direction);\n\t\n\t        if (direction) {\n\t            input.additionalEvent = this.options.event + direction;\n\t        }\n\t        this._super.emit.call(this, input);\n\t    }\n\t});\n\t\n\t/**\n\t * Pinch\n\t * Recognized when two or more pointers are moving toward (zoom-in) or away from each other (zoom-out).\n\t * @constructor\n\t * @extends AttrRecognizer\n\t */\n\tfunction PinchRecognizer() {\n\t    AttrRecognizer.apply(this, arguments);\n\t}\n\t\n\tinherit(PinchRecognizer, AttrRecognizer, {\n\t    /**\n\t     * @namespace\n\t     * @memberof PinchRecognizer\n\t     */\n\t    defaults: {\n\t        event: 'pinch',\n\t        threshold: 0,\n\t        pointers: 2\n\t    },\n\t\n\t    getTouchAction: function() {\n\t        return [TOUCH_ACTION_NONE];\n\t    },\n\t\n\t    attrTest: function(input) {\n\t        return this._super.attrTest.call(this, input) &&\n\t            (Math.abs(input.scale - 1) > this.options.threshold || this.state & STATE_BEGAN);\n\t    },\n\t\n\t    emit: function(input) {\n\t        if (input.scale !== 1) {\n\t            var inOut = input.scale < 1 ? 'in' : 'out';\n\t            input.additionalEvent = this.options.event + inOut;\n\t        }\n\t        this._super.emit.call(this, input);\n\t    }\n\t});\n\t\n\t/**\n\t * Press\n\t * Recognized when the pointer is down for x ms without any movement.\n\t * @constructor\n\t * @extends Recognizer\n\t */\n\tfunction PressRecognizer() {\n\t    Recognizer.apply(this, arguments);\n\t\n\t    this._timer = null;\n\t    this._input = null;\n\t}\n\t\n\tinherit(PressRecognizer, Recognizer, {\n\t    /**\n\t     * @namespace\n\t     * @memberof PressRecognizer\n\t     */\n\t    defaults: {\n\t        event: 'press',\n\t        pointers: 1,\n\t        time: 251, // minimal time of the pointer to be pressed\n\t        threshold: 9 // a minimal movement is ok, but keep it low\n\t    },\n\t\n\t    getTouchAction: function() {\n\t        return [TOUCH_ACTION_AUTO];\n\t    },\n\t\n\t    process: function(input) {\n\t        var options = this.options;\n\t        var validPointers = input.pointers.length === options.pointers;\n\t        var validMovement = input.distance < options.threshold;\n\t        var validTime = input.deltaTime > options.time;\n\t\n\t        this._input = input;\n\t\n\t        // we only allow little movement\n\t        // and we've reached an end event, so a tap is possible\n\t        if (!validMovement || !validPointers || (input.eventType & (INPUT_END | INPUT_CANCEL) && !validTime)) {\n\t            this.reset();\n\t        } else if (input.eventType & INPUT_START) {\n\t            this.reset();\n\t            this._timer = setTimeoutContext(function() {\n\t                this.state = STATE_RECOGNIZED;\n\t                this.tryEmit();\n\t            }, options.time, this);\n\t        } else if (input.eventType & INPUT_END) {\n\t            return STATE_RECOGNIZED;\n\t        }\n\t        return STATE_FAILED;\n\t    },\n\t\n\t    reset: function() {\n\t        clearTimeout(this._timer);\n\t    },\n\t\n\t    emit: function(input) {\n\t        if (this.state !== STATE_RECOGNIZED) {\n\t            return;\n\t        }\n\t\n\t        if (input && (input.eventType & INPUT_END)) {\n\t            this.manager.emit(this.options.event + 'up', input);\n\t        } else {\n\t            this._input.timeStamp = now();\n\t            this.manager.emit(this.options.event, this._input);\n\t        }\n\t    }\n\t});\n\t\n\t/**\n\t * Rotate\n\t * Recognized when two or more pointer are moving in a circular motion.\n\t * @constructor\n\t * @extends AttrRecognizer\n\t */\n\tfunction RotateRecognizer() {\n\t    AttrRecognizer.apply(this, arguments);\n\t}\n\t\n\tinherit(RotateRecognizer, AttrRecognizer, {\n\t    /**\n\t     * @namespace\n\t     * @memberof RotateRecognizer\n\t     */\n\t    defaults: {\n\t        event: 'rotate',\n\t        threshold: 0,\n\t        pointers: 2\n\t    },\n\t\n\t    getTouchAction: function() {\n\t        return [TOUCH_ACTION_NONE];\n\t    },\n\t\n\t    attrTest: function(input) {\n\t        return this._super.attrTest.call(this, input) &&\n\t            (Math.abs(input.rotation) > this.options.threshold || this.state & STATE_BEGAN);\n\t    }\n\t});\n\t\n\t/**\n\t * Swipe\n\t * Recognized when the pointer is moving fast (velocity), with enough distance in the allowed direction.\n\t * @constructor\n\t * @extends AttrRecognizer\n\t */\n\tfunction SwipeRecognizer() {\n\t    AttrRecognizer.apply(this, arguments);\n\t}\n\t\n\tinherit(SwipeRecognizer, AttrRecognizer, {\n\t    /**\n\t     * @namespace\n\t     * @memberof SwipeRecognizer\n\t     */\n\t    defaults: {\n\t        event: 'swipe',\n\t        threshold: 10,\n\t        velocity: 0.3,\n\t        direction: DIRECTION_HORIZONTAL | DIRECTION_VERTICAL,\n\t        pointers: 1\n\t    },\n\t\n\t    getTouchAction: function() {\n\t        return PanRecognizer.prototype.getTouchAction.call(this);\n\t    },\n\t\n\t    attrTest: function(input) {\n\t        var direction = this.options.direction;\n\t        var velocity;\n\t\n\t        if (direction & (DIRECTION_HORIZONTAL | DIRECTION_VERTICAL)) {\n\t            velocity = input.overallVelocity;\n\t        } else if (direction & DIRECTION_HORIZONTAL) {\n\t            velocity = input.overallVelocityX;\n\t        } else if (direction & DIRECTION_VERTICAL) {\n\t            velocity = input.overallVelocityY;\n\t        }\n\t\n\t        return this._super.attrTest.call(this, input) &&\n\t            direction & input.offsetDirection &&\n\t            input.distance > this.options.threshold &&\n\t            input.maxPointers == this.options.pointers &&\n\t            abs(velocity) > this.options.velocity && input.eventType & INPUT_END;\n\t    },\n\t\n\t    emit: function(input) {\n\t        var direction = directionStr(input.offsetDirection);\n\t        if (direction) {\n\t            this.manager.emit(this.options.event + direction, input);\n\t        }\n\t\n\t        this.manager.emit(this.options.event, input);\n\t    }\n\t});\n\t\n\t/**\n\t * A tap is ecognized when the pointer is doing a small tap/click. Multiple taps are recognized if they occur\n\t * between the given interval and position. The delay option can be used to recognize multi-taps without firing\n\t * a single tap.\n\t *\n\t * The eventData from the emitted event contains the property `tapCount`, which contains the amount of\n\t * multi-taps being recognized.\n\t * @constructor\n\t * @extends Recognizer\n\t */\n\tfunction TapRecognizer() {\n\t    Recognizer.apply(this, arguments);\n\t\n\t    // previous time and center,\n\t    // used for tap counting\n\t    this.pTime = false;\n\t    this.pCenter = false;\n\t\n\t    this._timer = null;\n\t    this._input = null;\n\t    this.count = 0;\n\t}\n\t\n\tinherit(TapRecognizer, Recognizer, {\n\t    /**\n\t     * @namespace\n\t     * @memberof PinchRecognizer\n\t     */\n\t    defaults: {\n\t        event: 'tap',\n\t        pointers: 1,\n\t        taps: 1,\n\t        interval: 300, // max time between the multi-tap taps\n\t        time: 250, // max time of the pointer to be down (like finger on the screen)\n\t        threshold: 9, // a minimal movement is ok, but keep it low\n\t        posThreshold: 10 // a multi-tap can be a bit off the initial position\n\t    },\n\t\n\t    getTouchAction: function() {\n\t        return [TOUCH_ACTION_MANIPULATION];\n\t    },\n\t\n\t    process: function(input) {\n\t        var options = this.options;\n\t\n\t        var validPointers = input.pointers.length === options.pointers;\n\t        var validMovement = input.distance < options.threshold;\n\t        var validTouchTime = input.deltaTime < options.time;\n\t\n\t        this.reset();\n\t\n\t        if ((input.eventType & INPUT_START) && (this.count === 0)) {\n\t            return this.failTimeout();\n\t        }\n\t\n\t        // we only allow little movement\n\t        // and we've reached an end event, so a tap is possible\n\t        if (validMovement && validTouchTime && validPointers) {\n\t            if (input.eventType != INPUT_END) {\n\t                return this.failTimeout();\n\t            }\n\t\n\t            var validInterval = this.pTime ? (input.timeStamp - this.pTime < options.interval) : true;\n\t            var validMultiTap = !this.pCenter || getDistance(this.pCenter, input.center) < options.posThreshold;\n\t\n\t            this.pTime = input.timeStamp;\n\t            this.pCenter = input.center;\n\t\n\t            if (!validMultiTap || !validInterval) {\n\t                this.count = 1;\n\t            } else {\n\t                this.count += 1;\n\t            }\n\t\n\t            this._input = input;\n\t\n\t            // if tap count matches we have recognized it,\n\t            // else it has began recognizing...\n\t            var tapCount = this.count % options.taps;\n\t            if (tapCount === 0) {\n\t                // no failing requirements, immediately trigger the tap event\n\t                // or wait as long as the multitap interval to trigger\n\t                if (!this.hasRequireFailures()) {\n\t                    return STATE_RECOGNIZED;\n\t                } else {\n\t                    this._timer = setTimeoutContext(function() {\n\t                        this.state = STATE_RECOGNIZED;\n\t                        this.tryEmit();\n\t                    }, options.interval, this);\n\t                    return STATE_BEGAN;\n\t                }\n\t            }\n\t        }\n\t        return STATE_FAILED;\n\t    },\n\t\n\t    failTimeout: function() {\n\t        this._timer = setTimeoutContext(function() {\n\t            this.state = STATE_FAILED;\n\t        }, this.options.interval, this);\n\t        return STATE_FAILED;\n\t    },\n\t\n\t    reset: function() {\n\t        clearTimeout(this._timer);\n\t    },\n\t\n\t    emit: function() {\n\t        if (this.state == STATE_RECOGNIZED) {\n\t            this._input.tapCount = this.count;\n\t            this.manager.emit(this.options.event, this._input);\n\t        }\n\t    }\n\t});\n\t\n\t/**\n\t * Simple way to create a manager with a default set of recognizers.\n\t * @param {HTMLElement} element\n\t * @param {Object} [options]\n\t * @constructor\n\t */\n\tfunction Hammer(element, options) {\n\t    options = options || {};\n\t    options.recognizers = ifUndefined(options.recognizers, Hammer.defaults.preset);\n\t    return new Manager(element, options);\n\t}\n\t\n\t/**\n\t * @const {string}\n\t */\n\tHammer.VERSION = '2.0.7';\n\t\n\t/**\n\t * default settings\n\t * @namespace\n\t */\n\tHammer.defaults = {\n\t    /**\n\t     * set if DOM events are being triggered.\n\t     * But this is slower and unused by simple implementations, so disabled by default.\n\t     * @type {Boolean}\n\t     * @default false\n\t     */\n\t    domEvents: false,\n\t\n\t    /**\n\t     * The value for the touchAction property/fallback.\n\t     * When set to `compute` it will magically set the correct value based on the added recognizers.\n\t     * @type {String}\n\t     * @default compute\n\t     */\n\t    touchAction: TOUCH_ACTION_COMPUTE,\n\t\n\t    /**\n\t     * @type {Boolean}\n\t     * @default true\n\t     */\n\t    enable: true,\n\t\n\t    /**\n\t     * EXPERIMENTAL FEATURE -- can be removed/changed\n\t     * Change the parent input target element.\n\t     * If Null, then it is being set the to main element.\n\t     * @type {Null|EventTarget}\n\t     * @default null\n\t     */\n\t    inputTarget: null,\n\t\n\t    /**\n\t     * force an input class\n\t     * @type {Null|Function}\n\t     * @default null\n\t     */\n\t    inputClass: null,\n\t\n\t    /**\n\t     * Default recognizer setup when calling `Hammer()`\n\t     * When creating a new Manager these will be skipped.\n\t     * @type {Array}\n\t     */\n\t    preset: [\n\t        // RecognizerClass, options, [recognizeWith, ...], [requireFailure, ...]\n\t        [RotateRecognizer, {enable: false}],\n\t        [PinchRecognizer, {enable: false}, ['rotate']],\n\t        [SwipeRecognizer, {direction: DIRECTION_HORIZONTAL}],\n\t        [PanRecognizer, {direction: DIRECTION_HORIZONTAL}, ['swipe']],\n\t        [TapRecognizer],\n\t        [TapRecognizer, {event: 'doubletap', taps: 2}, ['tap']],\n\t        [PressRecognizer]\n\t    ],\n\t\n\t    /**\n\t     * Some CSS properties can be used to improve the working of Hammer.\n\t     * Add them to this method and they will be set when creating a new Manager.\n\t     * @namespace\n\t     */\n\t    cssProps: {\n\t        /**\n\t         * Disables text selection to improve the dragging gesture. Mainly for desktop browsers.\n\t         * @type {String}\n\t         * @default 'none'\n\t         */\n\t        userSelect: 'none',\n\t\n\t        /**\n\t         * Disable the Windows Phone grippers when pressing an element.\n\t         * @type {String}\n\t         * @default 'none'\n\t         */\n\t        touchSelect: 'none',\n\t\n\t        /**\n\t         * Disables the default callout shown when you touch and hold a touch target.\n\t         * On iOS, when you touch and hold a touch target such as a link, Safari displays\n\t         * a callout containing information about the link. This property allows you to disable that callout.\n\t         * @type {String}\n\t         * @default 'none'\n\t         */\n\t        touchCallout: 'none',\n\t\n\t        /**\n\t         * Specifies whether zooming is enabled. Used by IE10>\n\t         * @type {String}\n\t         * @default 'none'\n\t         */\n\t        contentZooming: 'none',\n\t\n\t        /**\n\t         * Specifies that an entire element should be draggable instead of its contents. Mainly for desktop browsers.\n\t         * @type {String}\n\t         * @default 'none'\n\t         */\n\t        userDrag: 'none',\n\t\n\t        /**\n\t         * Overrides the highlight color shown when the user taps a link or a JavaScript\n\t         * clickable element in iOS. This property obeys the alpha value, if specified.\n\t         * @type {String}\n\t         * @default 'rgba(0,0,0,0)'\n\t         */\n\t        tapHighlightColor: 'rgba(0,0,0,0)'\n\t    }\n\t};\n\t\n\tvar STOP = 1;\n\tvar FORCED_STOP = 2;\n\t\n\t/**\n\t * Manager\n\t * @param {HTMLElement} element\n\t * @param {Object} [options]\n\t * @constructor\n\t */\n\tfunction Manager(element, options) {\n\t    this.options = assign({}, Hammer.defaults, options || {});\n\t\n\t    this.options.inputTarget = this.options.inputTarget || element;\n\t\n\t    this.handlers = {};\n\t    this.session = {};\n\t    this.recognizers = [];\n\t    this.oldCssProps = {};\n\t\n\t    this.element = element;\n\t    this.input = createInputInstance(this);\n\t    this.touchAction = new TouchAction(this, this.options.touchAction);\n\t\n\t    toggleCssProps(this, true);\n\t\n\t    each(this.options.recognizers, function(item) {\n\t        var recognizer = this.add(new (item[0])(item[1]));\n\t        item[2] && recognizer.recognizeWith(item[2]);\n\t        item[3] && recognizer.requireFailure(item[3]);\n\t    }, this);\n\t}\n\t\n\tManager.prototype = {\n\t    /**\n\t     * set options\n\t     * @param {Object} options\n\t     * @returns {Manager}\n\t     */\n\t    set: function(options) {\n\t        assign(this.options, options);\n\t\n\t        // Options that need a little more setup\n\t        if (options.touchAction) {\n\t            this.touchAction.update();\n\t        }\n\t        if (options.inputTarget) {\n\t            // Clean up existing event listeners and reinitialize\n\t            this.input.destroy();\n\t            this.input.target = options.inputTarget;\n\t            this.input.init();\n\t        }\n\t        return this;\n\t    },\n\t\n\t    /**\n\t     * stop recognizing for this session.\n\t     * This session will be discarded, when a new [input]start event is fired.\n\t     * When forced, the recognizer cycle is stopped immediately.\n\t     * @param {Boolean} [force]\n\t     */\n\t    stop: function(force) {\n\t        this.session.stopped = force ? FORCED_STOP : STOP;\n\t    },\n\t\n\t    /**\n\t     * run the recognizers!\n\t     * called by the inputHandler function on every movement of the pointers (touches)\n\t     * it walks through all the recognizers and tries to detect the gesture that is being made\n\t     * @param {Object} inputData\n\t     */\n\t    recognize: function(inputData) {\n\t        var session = this.session;\n\t        if (session.stopped) {\n\t            return;\n\t        }\n\t\n\t        // run the touch-action polyfill\n\t        this.touchAction.preventDefaults(inputData);\n\t\n\t        var recognizer;\n\t        var recognizers = this.recognizers;\n\t\n\t        // this holds the recognizer that is being recognized.\n\t        // so the recognizer's state needs to be BEGAN, CHANGED, ENDED or RECOGNIZED\n\t        // if no recognizer is detecting a thing, it is set to `null`\n\t        var curRecognizer = session.curRecognizer;\n\t\n\t        // reset when the last recognizer is recognized\n\t        // or when we're in a new session\n\t        if (!curRecognizer || (curRecognizer && curRecognizer.state & STATE_RECOGNIZED)) {\n\t            curRecognizer = session.curRecognizer = null;\n\t        }\n\t\n\t        var i = 0;\n\t        while (i < recognizers.length) {\n\t            recognizer = recognizers[i];\n\t\n\t            // find out if we are allowed try to recognize the input for this one.\n\t            // 1.   allow if the session is NOT forced stopped (see the .stop() method)\n\t            // 2.   allow if we still haven't recognized a gesture in this session, or the this recognizer is the one\n\t            //      that is being recognized.\n\t            // 3.   allow if the recognizer is allowed to run simultaneous with the current recognized recognizer.\n\t            //      this can be setup with the `recognizeWith()` method on the recognizer.\n\t            if (session.stopped !== FORCED_STOP && ( // 1\n\t                    !curRecognizer || recognizer == curRecognizer || // 2\n\t                    recognizer.canRecognizeWith(curRecognizer))) { // 3\n\t                recognizer.recognize(inputData);\n\t            } else {\n\t                recognizer.reset();\n\t            }\n\t\n\t            // if the recognizer has been recognizing the input as a valid gesture, we want to store this one as the\n\t            // current active recognizer. but only if we don't already have an active recognizer\n\t            if (!curRecognizer && recognizer.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED)) {\n\t                curRecognizer = session.curRecognizer = recognizer;\n\t            }\n\t            i++;\n\t        }\n\t    },\n\t\n\t    /**\n\t     * get a recognizer by its event name.\n\t     * @param {Recognizer|String} recognizer\n\t     * @returns {Recognizer|Null}\n\t     */\n\t    get: function(recognizer) {\n\t        if (recognizer instanceof Recognizer) {\n\t            return recognizer;\n\t        }\n\t\n\t        var recognizers = this.recognizers;\n\t        for (var i = 0; i < recognizers.length; i++) {\n\t            if (recognizers[i].options.event == recognizer) {\n\t                return recognizers[i];\n\t            }\n\t        }\n\t        return null;\n\t    },\n\t\n\t    /**\n\t     * add a recognizer to the manager\n\t     * existing recognizers with the same event name will be removed\n\t     * @param {Recognizer} recognizer\n\t     * @returns {Recognizer|Manager}\n\t     */\n\t    add: function(recognizer) {\n\t        if (invokeArrayArg(recognizer, 'add', this)) {\n\t            return this;\n\t        }\n\t\n\t        // remove existing\n\t        var existing = this.get(recognizer.options.event);\n\t        if (existing) {\n\t            this.remove(existing);\n\t        }\n\t\n\t        this.recognizers.push(recognizer);\n\t        recognizer.manager = this;\n\t\n\t        this.touchAction.update();\n\t        return recognizer;\n\t    },\n\t\n\t    /**\n\t     * remove a recognizer by name or instance\n\t     * @param {Recognizer|String} recognizer\n\t     * @returns {Manager}\n\t     */\n\t    remove: function(recognizer) {\n\t        if (invokeArrayArg(recognizer, 'remove', this)) {\n\t            return this;\n\t        }\n\t\n\t        recognizer = this.get(recognizer);\n\t\n\t        // let's make sure this recognizer exists\n\t        if (recognizer) {\n\t            var recognizers = this.recognizers;\n\t            var index = inArray(recognizers, recognizer);\n\t\n\t            if (index !== -1) {\n\t                recognizers.splice(index, 1);\n\t                this.touchAction.update();\n\t            }\n\t        }\n\t\n\t        return this;\n\t    },\n\t\n\t    /**\n\t     * bind event\n\t     * @param {String} events\n\t     * @param {Function} handler\n\t     * @returns {EventEmitter} this\n\t     */\n\t    on: function(events, handler) {\n\t        if (events === undefined) {\n\t            return;\n\t        }\n\t        if (handler === undefined) {\n\t            return;\n\t        }\n\t\n\t        var handlers = this.handlers;\n\t        each(splitStr(events), function(event) {\n\t            handlers[event] = handlers[event] || [];\n\t            handlers[event].push(handler);\n\t        });\n\t        return this;\n\t    },\n\t\n\t    /**\n\t     * unbind event, leave emit blank to remove all handlers\n\t     * @param {String} events\n\t     * @param {Function} [handler]\n\t     * @returns {EventEmitter} this\n\t     */\n\t    off: function(events, handler) {\n\t        if (events === undefined) {\n\t            return;\n\t        }\n\t\n\t        var handlers = this.handlers;\n\t        each(splitStr(events), function(event) {\n\t            if (!handler) {\n\t                delete handlers[event];\n\t            } else {\n\t                handlers[event] && handlers[event].splice(inArray(handlers[event], handler), 1);\n\t            }\n\t        });\n\t        return this;\n\t    },\n\t\n\t    /**\n\t     * emit event to the listeners\n\t     * @param {String} event\n\t     * @param {Object} data\n\t     */\n\t    emit: function(event, data) {\n\t        // we also want to trigger dom events\n\t        if (this.options.domEvents) {\n\t            triggerDomEvent(event, data);\n\t        }\n\t\n\t        // no handlers, so skip it all\n\t        var handlers = this.handlers[event] && this.handlers[event].slice();\n\t        if (!handlers || !handlers.length) {\n\t            return;\n\t        }\n\t\n\t        data.type = event;\n\t        data.preventDefault = function() {\n\t            data.srcEvent.preventDefault();\n\t        };\n\t\n\t        var i = 0;\n\t        while (i < handlers.length) {\n\t            handlers[i](data);\n\t            i++;\n\t        }\n\t    },\n\t\n\t    /**\n\t     * destroy the manager and unbinds all events\n\t     * it doesn't unbind dom events, that is the user own responsibility\n\t     */\n\t    destroy: function() {\n\t        this.element && toggleCssProps(this, false);\n\t\n\t        this.handlers = {};\n\t        this.session = {};\n\t        this.input.destroy();\n\t        this.element = null;\n\t    }\n\t};\n\t\n\t/**\n\t * add/remove the css properties as defined in manager.options.cssProps\n\t * @param {Manager} manager\n\t * @param {Boolean} add\n\t */\n\tfunction toggleCssProps(manager, add) {\n\t    var element = manager.element;\n\t    if (!element.style) {\n\t        return;\n\t    }\n\t    var prop;\n\t    each(manager.options.cssProps, function(value, name) {\n\t        prop = prefixed(element.style, name);\n\t        if (add) {\n\t            manager.oldCssProps[prop] = element.style[prop];\n\t            element.style[prop] = value;\n\t        } else {\n\t            element.style[prop] = manager.oldCssProps[prop] || '';\n\t        }\n\t    });\n\t    if (!add) {\n\t        manager.oldCssProps = {};\n\t    }\n\t}\n\t\n\t/**\n\t * trigger dom event\n\t * @param {String} event\n\t * @param {Object} data\n\t */\n\tfunction triggerDomEvent(event, data) {\n\t    var gestureEvent = document.createEvent('Event');\n\t    gestureEvent.initEvent(event, true, true);\n\t    gestureEvent.gesture = data;\n\t    data.target.dispatchEvent(gestureEvent);\n\t}\n\t\n\tassign(Hammer, {\n\t    INPUT_START: INPUT_START,\n\t    INPUT_MOVE: INPUT_MOVE,\n\t    INPUT_END: INPUT_END,\n\t    INPUT_CANCEL: INPUT_CANCEL,\n\t\n\t    STATE_POSSIBLE: STATE_POSSIBLE,\n\t    STATE_BEGAN: STATE_BEGAN,\n\t    STATE_CHANGED: STATE_CHANGED,\n\t    STATE_ENDED: STATE_ENDED,\n\t    STATE_RECOGNIZED: STATE_RECOGNIZED,\n\t    STATE_CANCELLED: STATE_CANCELLED,\n\t    STATE_FAILED: STATE_FAILED,\n\t\n\t    DIRECTION_NONE: DIRECTION_NONE,\n\t    DIRECTION_LEFT: DIRECTION_LEFT,\n\t    DIRECTION_RIGHT: DIRECTION_RIGHT,\n\t    DIRECTION_UP: DIRECTION_UP,\n\t    DIRECTION_DOWN: DIRECTION_DOWN,\n\t    DIRECTION_HORIZONTAL: DIRECTION_HORIZONTAL,\n\t    DIRECTION_VERTICAL: DIRECTION_VERTICAL,\n\t    DIRECTION_ALL: DIRECTION_ALL,\n\t\n\t    Manager: Manager,\n\t    Input: Input,\n\t    TouchAction: TouchAction,\n\t\n\t    TouchInput: TouchInput,\n\t    MouseInput: MouseInput,\n\t    PointerEventInput: PointerEventInput,\n\t    TouchMouseInput: TouchMouseInput,\n\t    SingleTouchInput: SingleTouchInput,\n\t\n\t    Recognizer: Recognizer,\n\t    AttrRecognizer: AttrRecognizer,\n\t    Tap: TapRecognizer,\n\t    Pan: PanRecognizer,\n\t    Swipe: SwipeRecognizer,\n\t    Pinch: PinchRecognizer,\n\t    Rotate: RotateRecognizer,\n\t    Press: PressRecognizer,\n\t\n\t    on: addEventListeners,\n\t    off: removeEventListeners,\n\t    each: each,\n\t    merge: merge,\n\t    extend: extend,\n\t    assign: assign,\n\t    inherit: inherit,\n\t    bindFn: bindFn,\n\t    prefixed: prefixed\n\t});\n\t\n\t// this prevents errors when Hammer is loaded in the presence of an AMD\n\t//  style loader but by script tag, not by the loader.\n\tvar freeGlobal = (typeof window !== 'undefined' ? window : (typeof self !== 'undefined' ? self : {})); // jshint ignore:line\n\tfreeGlobal.Hammer = Hammer;\n\t\n\tif (true) {\n\t    !(__WEBPACK_AMD_DEFINE_RESULT__ = function() {\n\t        return Hammer;\n\t    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t} else if (typeof module != 'undefined' && module.exports) {\n\t    module.exports = Hammer;\n\t} else {\n\t    window[exportName] = Hammer;\n\t}\n\t\n\t})(window, document, 'Hammer');\n\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** build.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 35bcf0b100a3b7b8b482\n **/","'use strict';\n\nimport Hammer from 'hammerjs';\n\nclass PhotoViewManager {\n  constructor(options = {}) {\n    const defaultOptions = {\n      maxScale: 2,\n      enableMultiZoom: false,\n      snapToGrid: true,\n      tapToZoom: false\n    };\n\n    this.options = Object.assign(defaultOptions, options);\n    return this;\n  }\n\n  init(selector) {\n    let container = typeof selector === 'string' ? document.querySelectorAll(selector)[0] : selector;\n    if (!container) {\n      console.warn(`You must provide a valid container for PhotoView (selector \"${selector}\" did not match any element)`);\n      return;\n    }\n\n    this.image = container.querySelectorAll('img')[0];\n    if (!this.image) {\n      console.warn(`You must have a valid img tag inside your container`);\n      return;\n    }\n\n    this._manager = new Hammer.Manager(this.image, { touchAction: 'pan-y' });\n    this._registerGestures();\n    this._registerEvents();\n    this.scale = 1;\n    this.deltaX = 0;\n    this.deltaY = 0;\n    return this;\n  }\n\n  _registerGestures() {\n    const zoom = new Hammer.Tap({ event: 'zoom', taps: this.options.tapToZoom ? 1 : 2 });\n    const pan = new Hammer.Pan({ direction: Hammer.DIRECTION_ALL, threshold: 10 });\n    const pinch = new Hammer.Pinch();\n    this._manager.add([pinch, zoom, pan]);\n  }\n\n  _getZoomLevel() {\n    let scale;\n    if (this.options.enableMultiZoom) {\n      let midScale = this.options.maxScale / 2;\n      scale = this.scale === 1 ? midScale : (this.scale === midScale) ? this.options.maxScale : 1;\n    } else {\n      scale = this.scale > 1 ? 1 : this.options.maxScale;\n    }\n\n    return scale;\n  }\n\n  imageTouchHandler(e) {\n      e.stopPropagation();\n      e.preventDefault();\n  }\n\n  disableTouchEvents() {\n    this.image.addEventListener('touchmove',this.imageTouchHandler, false);\n    this.image.addEventListener('touchstart',this.imageTouchHandler, false);\n  }\n\n  enableTouchEvents() {\n    this.image.removeEventListener('touchmove',this.imageTouchHandler, false);\n    this.image.removeEventListener('touchstart',this.imageTouchHandler, false);\n  }\n\n  handleTouchEvent() {\n    if(this.scale > 1){\n      this.disableTouchEvents();\n    } else {\n      this.enableTouchEvents();\n    }\n  }\n\n  _registerEvents() {\n    this._manager.on('zoom', e => {\n      let {x, y} = e.center;\n      let scale = this._getZoomLevel();\n      this._setTransition(true);\n      this._transform(x, y, scale);\n      this.handleTouchEvent();\n    });\n\n    this._manager.on('pinchstart', e => {\n      clearTimeout(this.panTimer);\n      this._enableGesture('pan', false);\n      let {x, y} = e.center;\n      this._setTransition(true);\n\n      if (this.scale === 1) {\n        this.pinchX = x;\n        this.pinchY = y;\n      }\n\n    });\n\n    this._manager.on('pinch', e => {\n      if (e.additionalEvent === 'pinchout') {\n        this._transform(this.pinchX, this.pinchY, this.options.maxScale);\n      } else if (e.additionalEvent === 'pinchin') {\n        this._transform(0, 0, 1);\n      }\n\n      this.handleTouchEvent();\n    });\n\n    this._manager.on('pinchend', e => {\n      this.panTimer = setTimeout(_ => this._enableGesture('pan', true), 1000);\n    });\n\n    this._manager.on('panstart', e => {\n      this._setTransition(false);\n    });\n\n    this._manager.on('pan', e => {\n      if (this.scale === 1) {\n        return;\n      }\n\n      e.srcEvent.stopPropagation();\n      this.currentDeltaX = (isNaN(this.deltaX) ? 0 : this.deltaX) + e.deltaX;\n      this.currentDeltaY = (isNaN(this.deltaY) ? 0 : this.deltaY) + e.deltaY;\n      if (this.options.snapToGrid) {\n        this._adjustSnapPositions();\n      }\n\n      this._setTransition(false);\n      this.image.style.transform = `translate3d(${this.currentDeltaX}px, ${this.currentDeltaY}px, 0px) scale(${this.scale})`;\n    });\n\n    this._manager.on('panend', e => {\n      this.deltaX = this.currentDeltaX;\n      this.deltaY = this.currentDeltaY;\n    });\n  }\n\n  _adjustSnapPositions() {\n    let imageOffsetLeft = this.image.offsetLeft;\n    let imageOffsetTop = this.image.offsetTop;\n    if (this.currentDeltaX + imageOffsetLeft > this.x) {\n      this.currentDeltaX = this.x - imageOffsetLeft;\n    } else if (this.x - this.currentDeltaX + imageOffsetLeft > this.image.width) {\n      let adjustWidth = (this.x - this.currentDeltaX + imageOffsetLeft) - this.image.width;\n      this.currentDeltaX = (this.currentDeltaX + adjustWidth);\n    }\n\n    if (this.currentDeltaY + imageOffsetTop > this.y) {\n      this.currentDeltaY = (this.y - imageOffsetTop);\n    } else if (this.y - this.currentDeltaY + imageOffsetTop > this.image.height) {\n      let adjustHeight = (this.y - this.currentDeltaY + imageOffsetTop) - this.image.height;\n      this.currentDeltaY = this.currentDeltaY + adjustHeight;\n    }\n\n  }\n\n  _transform(x, y, scale) {\n    if (scale === 1) {\n      x = this.x; y = this.y;\n    } else {\n      x -= this.image.offsetLeft;\n      y -= this.image.offsetTop;\n    }\n\n    this.image.style['transformOrigin'] = `${x}px ${y}px`;\n    this.image.style.transform = `scale3d(${scale},${scale},1)`;\n    this.x = x;\n    this.y = y;\n    this.scale = scale;\n    this._onTransformEnd();\n  }\n\n  _onTransformEnd() {\n    if (this.scale <= 1) {\n      this.deltaX = this.deltaY = 0;\n    }\n  }\n\n  _enableGesture(gesture, value) {\n    this._manager.get(gesture).set({ enable: value });\n  }\n\n  _setTransition(value) {\n    this.image.style.transition = value ? 'transform 0.5s' : 'none';\n  }\n\n  _unregisterEvents() {\n    this._manager.off('pan');\n    this._manager.off('pinch');\n    this._manager.off('zoom');\n  }\n\n  reset() {\n    this.image.style.transform = 'none';\n  }\n\n  destroy() {\n    this._unregisterEvents();\n    this._manager = null;\n  }\n}\n\nclass PhotoView {\n  constructor(selector, options = {}) {\n    this.instances = [];\n    let slice = Array.prototype.slice;\n    let elements = slice.call(document.querySelectorAll(selector));\n    elements.forEach(item => {\n      this.instances.push(\n        new PhotoViewManager(options).init(item)\n      );\n    });\n\n  }\n\n  reset() {\n    this.instances.forEach(photoViewInstance => {\n      photoViewInstance.reset();\n    });\n  }\n\n  destroy() {\n    this.instances.forEach(photoViewInstance => {\n      photoViewInstance.destroy();\n    });\n\n    this.instances = null;\n  }\n}\n\nexport default PhotoView;\n\n\n\n/** WEBPACK FOOTER **\n ** ./index.js\n **/","/*! Hammer.JS - v2.0.7 - 2016-04-22\n * http://hammerjs.github.io/\n *\n * Copyright (c) 2016 Jorik Tangelder;\n * Licensed under the MIT license */\n(function(window, document, exportName, undefined) {\n  'use strict';\n\nvar VENDOR_PREFIXES = ['', 'webkit', 'Moz', 'MS', 'ms', 'o'];\nvar TEST_ELEMENT = document.createElement('div');\n\nvar TYPE_FUNCTION = 'function';\n\nvar round = Math.round;\nvar abs = Math.abs;\nvar now = Date.now;\n\n/**\n * set a timeout with a given scope\n * @param {Function} fn\n * @param {Number} timeout\n * @param {Object} context\n * @returns {number}\n */\nfunction setTimeoutContext(fn, timeout, context) {\n    return setTimeout(bindFn(fn, context), timeout);\n}\n\n/**\n * if the argument is an array, we want to execute the fn on each entry\n * if it aint an array we don't want to do a thing.\n * this is used by all the methods that accept a single and array argument.\n * @param {*|Array} arg\n * @param {String} fn\n * @param {Object} [context]\n * @returns {Boolean}\n */\nfunction invokeArrayArg(arg, fn, context) {\n    if (Array.isArray(arg)) {\n        each(arg, context[fn], context);\n        return true;\n    }\n    return false;\n}\n\n/**\n * walk objects and arrays\n * @param {Object} obj\n * @param {Function} iterator\n * @param {Object} context\n */\nfunction each(obj, iterator, context) {\n    var i;\n\n    if (!obj) {\n        return;\n    }\n\n    if (obj.forEach) {\n        obj.forEach(iterator, context);\n    } else if (obj.length !== undefined) {\n        i = 0;\n        while (i < obj.length) {\n            iterator.call(context, obj[i], i, obj);\n            i++;\n        }\n    } else {\n        for (i in obj) {\n            obj.hasOwnProperty(i) && iterator.call(context, obj[i], i, obj);\n        }\n    }\n}\n\n/**\n * wrap a method with a deprecation warning and stack trace\n * @param {Function} method\n * @param {String} name\n * @param {String} message\n * @returns {Function} A new function wrapping the supplied method.\n */\nfunction deprecate(method, name, message) {\n    var deprecationMessage = 'DEPRECATED METHOD: ' + name + '\\n' + message + ' AT \\n';\n    return function() {\n        var e = new Error('get-stack-trace');\n        var stack = e && e.stack ? e.stack.replace(/^[^\\(]+?[\\n$]/gm, '')\n            .replace(/^\\s+at\\s+/gm, '')\n            .replace(/^Object.<anonymous>\\s*\\(/gm, '{anonymous}()@') : 'Unknown Stack Trace';\n\n        var log = window.console && (window.console.warn || window.console.log);\n        if (log) {\n            log.call(window.console, deprecationMessage, stack);\n        }\n        return method.apply(this, arguments);\n    };\n}\n\n/**\n * extend object.\n * means that properties in dest will be overwritten by the ones in src.\n * @param {Object} target\n * @param {...Object} objects_to_assign\n * @returns {Object} target\n */\nvar assign;\nif (typeof Object.assign !== 'function') {\n    assign = function assign(target) {\n        if (target === undefined || target === null) {\n            throw new TypeError('Cannot convert undefined or null to object');\n        }\n\n        var output = Object(target);\n        for (var index = 1; index < arguments.length; index++) {\n            var source = arguments[index];\n            if (source !== undefined && source !== null) {\n                for (var nextKey in source) {\n                    if (source.hasOwnProperty(nextKey)) {\n                        output[nextKey] = source[nextKey];\n                    }\n                }\n            }\n        }\n        return output;\n    };\n} else {\n    assign = Object.assign;\n}\n\n/**\n * extend object.\n * means that properties in dest will be overwritten by the ones in src.\n * @param {Object} dest\n * @param {Object} src\n * @param {Boolean} [merge=false]\n * @returns {Object} dest\n */\nvar extend = deprecate(function extend(dest, src, merge) {\n    var keys = Object.keys(src);\n    var i = 0;\n    while (i < keys.length) {\n        if (!merge || (merge && dest[keys[i]] === undefined)) {\n            dest[keys[i]] = src[keys[i]];\n        }\n        i++;\n    }\n    return dest;\n}, 'extend', 'Use `assign`.');\n\n/**\n * merge the values from src in the dest.\n * means that properties that exist in dest will not be overwritten by src\n * @param {Object} dest\n * @param {Object} src\n * @returns {Object} dest\n */\nvar merge = deprecate(function merge(dest, src) {\n    return extend(dest, src, true);\n}, 'merge', 'Use `assign`.');\n\n/**\n * simple class inheritance\n * @param {Function} child\n * @param {Function} base\n * @param {Object} [properties]\n */\nfunction inherit(child, base, properties) {\n    var baseP = base.prototype,\n        childP;\n\n    childP = child.prototype = Object.create(baseP);\n    childP.constructor = child;\n    childP._super = baseP;\n\n    if (properties) {\n        assign(childP, properties);\n    }\n}\n\n/**\n * simple function bind\n * @param {Function} fn\n * @param {Object} context\n * @returns {Function}\n */\nfunction bindFn(fn, context) {\n    return function boundFn() {\n        return fn.apply(context, arguments);\n    };\n}\n\n/**\n * let a boolean value also be a function that must return a boolean\n * this first item in args will be used as the context\n * @param {Boolean|Function} val\n * @param {Array} [args]\n * @returns {Boolean}\n */\nfunction boolOrFn(val, args) {\n    if (typeof val == TYPE_FUNCTION) {\n        return val.apply(args ? args[0] || undefined : undefined, args);\n    }\n    return val;\n}\n\n/**\n * use the val2 when val1 is undefined\n * @param {*} val1\n * @param {*} val2\n * @returns {*}\n */\nfunction ifUndefined(val1, val2) {\n    return (val1 === undefined) ? val2 : val1;\n}\n\n/**\n * addEventListener with multiple events at once\n * @param {EventTarget} target\n * @param {String} types\n * @param {Function} handler\n */\nfunction addEventListeners(target, types, handler) {\n    each(splitStr(types), function(type) {\n        target.addEventListener(type, handler, false);\n    });\n}\n\n/**\n * removeEventListener with multiple events at once\n * @param {EventTarget} target\n * @param {String} types\n * @param {Function} handler\n */\nfunction removeEventListeners(target, types, handler) {\n    each(splitStr(types), function(type) {\n        target.removeEventListener(type, handler, false);\n    });\n}\n\n/**\n * find if a node is in the given parent\n * @method hasParent\n * @param {HTMLElement} node\n * @param {HTMLElement} parent\n * @return {Boolean} found\n */\nfunction hasParent(node, parent) {\n    while (node) {\n        if (node == parent) {\n            return true;\n        }\n        node = node.parentNode;\n    }\n    return false;\n}\n\n/**\n * small indexOf wrapper\n * @param {String} str\n * @param {String} find\n * @returns {Boolean} found\n */\nfunction inStr(str, find) {\n    return str.indexOf(find) > -1;\n}\n\n/**\n * split string on whitespace\n * @param {String} str\n * @returns {Array} words\n */\nfunction splitStr(str) {\n    return str.trim().split(/\\s+/g);\n}\n\n/**\n * find if a array contains the object using indexOf or a simple polyFill\n * @param {Array} src\n * @param {String} find\n * @param {String} [findByKey]\n * @return {Boolean|Number} false when not found, or the index\n */\nfunction inArray(src, find, findByKey) {\n    if (src.indexOf && !findByKey) {\n        return src.indexOf(find);\n    } else {\n        var i = 0;\n        while (i < src.length) {\n            if ((findByKey && src[i][findByKey] == find) || (!findByKey && src[i] === find)) {\n                return i;\n            }\n            i++;\n        }\n        return -1;\n    }\n}\n\n/**\n * convert array-like objects to real arrays\n * @param {Object} obj\n * @returns {Array}\n */\nfunction toArray(obj) {\n    return Array.prototype.slice.call(obj, 0);\n}\n\n/**\n * unique array with objects based on a key (like 'id') or just by the array's value\n * @param {Array} src [{id:1},{id:2},{id:1}]\n * @param {String} [key]\n * @param {Boolean} [sort=False]\n * @returns {Array} [{id:1},{id:2}]\n */\nfunction uniqueArray(src, key, sort) {\n    var results = [];\n    var values = [];\n    var i = 0;\n\n    while (i < src.length) {\n        var val = key ? src[i][key] : src[i];\n        if (inArray(values, val) < 0) {\n            results.push(src[i]);\n        }\n        values[i] = val;\n        i++;\n    }\n\n    if (sort) {\n        if (!key) {\n            results = results.sort();\n        } else {\n            results = results.sort(function sortUniqueArray(a, b) {\n                return a[key] > b[key];\n            });\n        }\n    }\n\n    return results;\n}\n\n/**\n * get the prefixed property\n * @param {Object} obj\n * @param {String} property\n * @returns {String|Undefined} prefixed\n */\nfunction prefixed(obj, property) {\n    var prefix, prop;\n    var camelProp = property[0].toUpperCase() + property.slice(1);\n\n    var i = 0;\n    while (i < VENDOR_PREFIXES.length) {\n        prefix = VENDOR_PREFIXES[i];\n        prop = (prefix) ? prefix + camelProp : property;\n\n        if (prop in obj) {\n            return prop;\n        }\n        i++;\n    }\n    return undefined;\n}\n\n/**\n * get a unique id\n * @returns {number} uniqueId\n */\nvar _uniqueId = 1;\nfunction uniqueId() {\n    return _uniqueId++;\n}\n\n/**\n * get the window object of an element\n * @param {HTMLElement} element\n * @returns {DocumentView|Window}\n */\nfunction getWindowForElement(element) {\n    var doc = element.ownerDocument || element;\n    return (doc.defaultView || doc.parentWindow || window);\n}\n\nvar MOBILE_REGEX = /mobile|tablet|ip(ad|hone|od)|android/i;\n\nvar SUPPORT_TOUCH = ('ontouchstart' in window);\nvar SUPPORT_POINTER_EVENTS = prefixed(window, 'PointerEvent') !== undefined;\nvar SUPPORT_ONLY_TOUCH = SUPPORT_TOUCH && MOBILE_REGEX.test(navigator.userAgent);\n\nvar INPUT_TYPE_TOUCH = 'touch';\nvar INPUT_TYPE_PEN = 'pen';\nvar INPUT_TYPE_MOUSE = 'mouse';\nvar INPUT_TYPE_KINECT = 'kinect';\n\nvar COMPUTE_INTERVAL = 25;\n\nvar INPUT_START = 1;\nvar INPUT_MOVE = 2;\nvar INPUT_END = 4;\nvar INPUT_CANCEL = 8;\n\nvar DIRECTION_NONE = 1;\nvar DIRECTION_LEFT = 2;\nvar DIRECTION_RIGHT = 4;\nvar DIRECTION_UP = 8;\nvar DIRECTION_DOWN = 16;\n\nvar DIRECTION_HORIZONTAL = DIRECTION_LEFT | DIRECTION_RIGHT;\nvar DIRECTION_VERTICAL = DIRECTION_UP | DIRECTION_DOWN;\nvar DIRECTION_ALL = DIRECTION_HORIZONTAL | DIRECTION_VERTICAL;\n\nvar PROPS_XY = ['x', 'y'];\nvar PROPS_CLIENT_XY = ['clientX', 'clientY'];\n\n/**\n * create new input type manager\n * @param {Manager} manager\n * @param {Function} callback\n * @returns {Input}\n * @constructor\n */\nfunction Input(manager, callback) {\n    var self = this;\n    this.manager = manager;\n    this.callback = callback;\n    this.element = manager.element;\n    this.target = manager.options.inputTarget;\n\n    // smaller wrapper around the handler, for the scope and the enabled state of the manager,\n    // so when disabled the input events are completely bypassed.\n    this.domHandler = function(ev) {\n        if (boolOrFn(manager.options.enable, [manager])) {\n            self.handler(ev);\n        }\n    };\n\n    this.init();\n\n}\n\nInput.prototype = {\n    /**\n     * should handle the inputEvent data and trigger the callback\n     * @virtual\n     */\n    handler: function() { },\n\n    /**\n     * bind the events\n     */\n    init: function() {\n        this.evEl && addEventListeners(this.element, this.evEl, this.domHandler);\n        this.evTarget && addEventListeners(this.target, this.evTarget, this.domHandler);\n        this.evWin && addEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);\n    },\n\n    /**\n     * unbind the events\n     */\n    destroy: function() {\n        this.evEl && removeEventListeners(this.element, this.evEl, this.domHandler);\n        this.evTarget && removeEventListeners(this.target, this.evTarget, this.domHandler);\n        this.evWin && removeEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);\n    }\n};\n\n/**\n * create new input type manager\n * called by the Manager constructor\n * @param {Hammer} manager\n * @returns {Input}\n */\nfunction createInputInstance(manager) {\n    var Type;\n    var inputClass = manager.options.inputClass;\n\n    if (inputClass) {\n        Type = inputClass;\n    } else if (SUPPORT_POINTER_EVENTS) {\n        Type = PointerEventInput;\n    } else if (SUPPORT_ONLY_TOUCH) {\n        Type = TouchInput;\n    } else if (!SUPPORT_TOUCH) {\n        Type = MouseInput;\n    } else {\n        Type = TouchMouseInput;\n    }\n    return new (Type)(manager, inputHandler);\n}\n\n/**\n * handle input events\n * @param {Manager} manager\n * @param {String} eventType\n * @param {Object} input\n */\nfunction inputHandler(manager, eventType, input) {\n    var pointersLen = input.pointers.length;\n    var changedPointersLen = input.changedPointers.length;\n    var isFirst = (eventType & INPUT_START && (pointersLen - changedPointersLen === 0));\n    var isFinal = (eventType & (INPUT_END | INPUT_CANCEL) && (pointersLen - changedPointersLen === 0));\n\n    input.isFirst = !!isFirst;\n    input.isFinal = !!isFinal;\n\n    if (isFirst) {\n        manager.session = {};\n    }\n\n    // source event is the normalized value of the domEvents\n    // like 'touchstart, mouseup, pointerdown'\n    input.eventType = eventType;\n\n    // compute scale, rotation etc\n    computeInputData(manager, input);\n\n    // emit secret event\n    manager.emit('hammer.input', input);\n\n    manager.recognize(input);\n    manager.session.prevInput = input;\n}\n\n/**\n * extend the data with some usable properties like scale, rotate, velocity etc\n * @param {Object} manager\n * @param {Object} input\n */\nfunction computeInputData(manager, input) {\n    var session = manager.session;\n    var pointers = input.pointers;\n    var pointersLength = pointers.length;\n\n    // store the first input to calculate the distance and direction\n    if (!session.firstInput) {\n        session.firstInput = simpleCloneInputData(input);\n    }\n\n    // to compute scale and rotation we need to store the multiple touches\n    if (pointersLength > 1 && !session.firstMultiple) {\n        session.firstMultiple = simpleCloneInputData(input);\n    } else if (pointersLength === 1) {\n        session.firstMultiple = false;\n    }\n\n    var firstInput = session.firstInput;\n    var firstMultiple = session.firstMultiple;\n    var offsetCenter = firstMultiple ? firstMultiple.center : firstInput.center;\n\n    var center = input.center = getCenter(pointers);\n    input.timeStamp = now();\n    input.deltaTime = input.timeStamp - firstInput.timeStamp;\n\n    input.angle = getAngle(offsetCenter, center);\n    input.distance = getDistance(offsetCenter, center);\n\n    computeDeltaXY(session, input);\n    input.offsetDirection = getDirection(input.deltaX, input.deltaY);\n\n    var overallVelocity = getVelocity(input.deltaTime, input.deltaX, input.deltaY);\n    input.overallVelocityX = overallVelocity.x;\n    input.overallVelocityY = overallVelocity.y;\n    input.overallVelocity = (abs(overallVelocity.x) > abs(overallVelocity.y)) ? overallVelocity.x : overallVelocity.y;\n\n    input.scale = firstMultiple ? getScale(firstMultiple.pointers, pointers) : 1;\n    input.rotation = firstMultiple ? getRotation(firstMultiple.pointers, pointers) : 0;\n\n    input.maxPointers = !session.prevInput ? input.pointers.length : ((input.pointers.length >\n        session.prevInput.maxPointers) ? input.pointers.length : session.prevInput.maxPointers);\n\n    computeIntervalInputData(session, input);\n\n    // find the correct target\n    var target = manager.element;\n    if (hasParent(input.srcEvent.target, target)) {\n        target = input.srcEvent.target;\n    }\n    input.target = target;\n}\n\nfunction computeDeltaXY(session, input) {\n    var center = input.center;\n    var offset = session.offsetDelta || {};\n    var prevDelta = session.prevDelta || {};\n    var prevInput = session.prevInput || {};\n\n    if (input.eventType === INPUT_START || prevInput.eventType === INPUT_END) {\n        prevDelta = session.prevDelta = {\n            x: prevInput.deltaX || 0,\n            y: prevInput.deltaY || 0\n        };\n\n        offset = session.offsetDelta = {\n            x: center.x,\n            y: center.y\n        };\n    }\n\n    input.deltaX = prevDelta.x + (center.x - offset.x);\n    input.deltaY = prevDelta.y + (center.y - offset.y);\n}\n\n/**\n * velocity is calculated every x ms\n * @param {Object} session\n * @param {Object} input\n */\nfunction computeIntervalInputData(session, input) {\n    var last = session.lastInterval || input,\n        deltaTime = input.timeStamp - last.timeStamp,\n        velocity, velocityX, velocityY, direction;\n\n    if (input.eventType != INPUT_CANCEL && (deltaTime > COMPUTE_INTERVAL || last.velocity === undefined)) {\n        var deltaX = input.deltaX - last.deltaX;\n        var deltaY = input.deltaY - last.deltaY;\n\n        var v = getVelocity(deltaTime, deltaX, deltaY);\n        velocityX = v.x;\n        velocityY = v.y;\n        velocity = (abs(v.x) > abs(v.y)) ? v.x : v.y;\n        direction = getDirection(deltaX, deltaY);\n\n        session.lastInterval = input;\n    } else {\n        // use latest velocity info if it doesn't overtake a minimum period\n        velocity = last.velocity;\n        velocityX = last.velocityX;\n        velocityY = last.velocityY;\n        direction = last.direction;\n    }\n\n    input.velocity = velocity;\n    input.velocityX = velocityX;\n    input.velocityY = velocityY;\n    input.direction = direction;\n}\n\n/**\n * create a simple clone from the input used for storage of firstInput and firstMultiple\n * @param {Object} input\n * @returns {Object} clonedInputData\n */\nfunction simpleCloneInputData(input) {\n    // make a simple copy of the pointers because we will get a reference if we don't\n    // we only need clientXY for the calculations\n    var pointers = [];\n    var i = 0;\n    while (i < input.pointers.length) {\n        pointers[i] = {\n            clientX: round(input.pointers[i].clientX),\n            clientY: round(input.pointers[i].clientY)\n        };\n        i++;\n    }\n\n    return {\n        timeStamp: now(),\n        pointers: pointers,\n        center: getCenter(pointers),\n        deltaX: input.deltaX,\n        deltaY: input.deltaY\n    };\n}\n\n/**\n * get the center of all the pointers\n * @param {Array} pointers\n * @return {Object} center contains `x` and `y` properties\n */\nfunction getCenter(pointers) {\n    var pointersLength = pointers.length;\n\n    // no need to loop when only one touch\n    if (pointersLength === 1) {\n        return {\n            x: round(pointers[0].clientX),\n            y: round(pointers[0].clientY)\n        };\n    }\n\n    var x = 0, y = 0, i = 0;\n    while (i < pointersLength) {\n        x += pointers[i].clientX;\n        y += pointers[i].clientY;\n        i++;\n    }\n\n    return {\n        x: round(x / pointersLength),\n        y: round(y / pointersLength)\n    };\n}\n\n/**\n * calculate the velocity between two points. unit is in px per ms.\n * @param {Number} deltaTime\n * @param {Number} x\n * @param {Number} y\n * @return {Object} velocity `x` and `y`\n */\nfunction getVelocity(deltaTime, x, y) {\n    return {\n        x: x / deltaTime || 0,\n        y: y / deltaTime || 0\n    };\n}\n\n/**\n * get the direction between two points\n * @param {Number} x\n * @param {Number} y\n * @return {Number} direction\n */\nfunction getDirection(x, y) {\n    if (x === y) {\n        return DIRECTION_NONE;\n    }\n\n    if (abs(x) >= abs(y)) {\n        return x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;\n    }\n    return y < 0 ? DIRECTION_UP : DIRECTION_DOWN;\n}\n\n/**\n * calculate the absolute distance between two points\n * @param {Object} p1 {x, y}\n * @param {Object} p2 {x, y}\n * @param {Array} [props] containing x and y keys\n * @return {Number} distance\n */\nfunction getDistance(p1, p2, props) {\n    if (!props) {\n        props = PROPS_XY;\n    }\n    var x = p2[props[0]] - p1[props[0]],\n        y = p2[props[1]] - p1[props[1]];\n\n    return Math.sqrt((x * x) + (y * y));\n}\n\n/**\n * calculate the angle between two coordinates\n * @param {Object} p1\n * @param {Object} p2\n * @param {Array} [props] containing x and y keys\n * @return {Number} angle\n */\nfunction getAngle(p1, p2, props) {\n    if (!props) {\n        props = PROPS_XY;\n    }\n    var x = p2[props[0]] - p1[props[0]],\n        y = p2[props[1]] - p1[props[1]];\n    return Math.atan2(y, x) * 180 / Math.PI;\n}\n\n/**\n * calculate the rotation degrees between two pointersets\n * @param {Array} start array of pointers\n * @param {Array} end array of pointers\n * @return {Number} rotation\n */\nfunction getRotation(start, end) {\n    return getAngle(end[1], end[0], PROPS_CLIENT_XY) + getAngle(start[1], start[0], PROPS_CLIENT_XY);\n}\n\n/**\n * calculate the scale factor between two pointersets\n * no scale is 1, and goes down to 0 when pinched together, and bigger when pinched out\n * @param {Array} start array of pointers\n * @param {Array} end array of pointers\n * @return {Number} scale\n */\nfunction getScale(start, end) {\n    return getDistance(end[0], end[1], PROPS_CLIENT_XY) / getDistance(start[0], start[1], PROPS_CLIENT_XY);\n}\n\nvar MOUSE_INPUT_MAP = {\n    mousedown: INPUT_START,\n    mousemove: INPUT_MOVE,\n    mouseup: INPUT_END\n};\n\nvar MOUSE_ELEMENT_EVENTS = 'mousedown';\nvar MOUSE_WINDOW_EVENTS = 'mousemove mouseup';\n\n/**\n * Mouse events input\n * @constructor\n * @extends Input\n */\nfunction MouseInput() {\n    this.evEl = MOUSE_ELEMENT_EVENTS;\n    this.evWin = MOUSE_WINDOW_EVENTS;\n\n    this.pressed = false; // mousedown state\n\n    Input.apply(this, arguments);\n}\n\ninherit(MouseInput, Input, {\n    /**\n     * handle mouse events\n     * @param {Object} ev\n     */\n    handler: function MEhandler(ev) {\n        var eventType = MOUSE_INPUT_MAP[ev.type];\n\n        // on start we want to have the left mouse button down\n        if (eventType & INPUT_START && ev.button === 0) {\n            this.pressed = true;\n        }\n\n        if (eventType & INPUT_MOVE && ev.which !== 1) {\n            eventType = INPUT_END;\n        }\n\n        // mouse must be down\n        if (!this.pressed) {\n            return;\n        }\n\n        if (eventType & INPUT_END) {\n            this.pressed = false;\n        }\n\n        this.callback(this.manager, eventType, {\n            pointers: [ev],\n            changedPointers: [ev],\n            pointerType: INPUT_TYPE_MOUSE,\n            srcEvent: ev\n        });\n    }\n});\n\nvar POINTER_INPUT_MAP = {\n    pointerdown: INPUT_START,\n    pointermove: INPUT_MOVE,\n    pointerup: INPUT_END,\n    pointercancel: INPUT_CANCEL,\n    pointerout: INPUT_CANCEL\n};\n\n// in IE10 the pointer types is defined as an enum\nvar IE10_POINTER_TYPE_ENUM = {\n    2: INPUT_TYPE_TOUCH,\n    3: INPUT_TYPE_PEN,\n    4: INPUT_TYPE_MOUSE,\n    5: INPUT_TYPE_KINECT // see https://twitter.com/jacobrossi/status/480596438489890816\n};\n\nvar POINTER_ELEMENT_EVENTS = 'pointerdown';\nvar POINTER_WINDOW_EVENTS = 'pointermove pointerup pointercancel';\n\n// IE10 has prefixed support, and case-sensitive\nif (window.MSPointerEvent && !window.PointerEvent) {\n    POINTER_ELEMENT_EVENTS = 'MSPointerDown';\n    POINTER_WINDOW_EVENTS = 'MSPointerMove MSPointerUp MSPointerCancel';\n}\n\n/**\n * Pointer events input\n * @constructor\n * @extends Input\n */\nfunction PointerEventInput() {\n    this.evEl = POINTER_ELEMENT_EVENTS;\n    this.evWin = POINTER_WINDOW_EVENTS;\n\n    Input.apply(this, arguments);\n\n    this.store = (this.manager.session.pointerEvents = []);\n}\n\ninherit(PointerEventInput, Input, {\n    /**\n     * handle mouse events\n     * @param {Object} ev\n     */\n    handler: function PEhandler(ev) {\n        var store = this.store;\n        var removePointer = false;\n\n        var eventTypeNormalized = ev.type.toLowerCase().replace('ms', '');\n        var eventType = POINTER_INPUT_MAP[eventTypeNormalized];\n        var pointerType = IE10_POINTER_TYPE_ENUM[ev.pointerType] || ev.pointerType;\n\n        var isTouch = (pointerType == INPUT_TYPE_TOUCH);\n\n        // get index of the event in the store\n        var storeIndex = inArray(store, ev.pointerId, 'pointerId');\n\n        // start and mouse must be down\n        if (eventType & INPUT_START && (ev.button === 0 || isTouch)) {\n            if (storeIndex < 0) {\n                store.push(ev);\n                storeIndex = store.length - 1;\n            }\n        } else if (eventType & (INPUT_END | INPUT_CANCEL)) {\n            removePointer = true;\n        }\n\n        // it not found, so the pointer hasn't been down (so it's probably a hover)\n        if (storeIndex < 0) {\n            return;\n        }\n\n        // update the event in the store\n        store[storeIndex] = ev;\n\n        this.callback(this.manager, eventType, {\n            pointers: store,\n            changedPointers: [ev],\n            pointerType: pointerType,\n            srcEvent: ev\n        });\n\n        if (removePointer) {\n            // remove from the store\n            store.splice(storeIndex, 1);\n        }\n    }\n});\n\nvar SINGLE_TOUCH_INPUT_MAP = {\n    touchstart: INPUT_START,\n    touchmove: INPUT_MOVE,\n    touchend: INPUT_END,\n    touchcancel: INPUT_CANCEL\n};\n\nvar SINGLE_TOUCH_TARGET_EVENTS = 'touchstart';\nvar SINGLE_TOUCH_WINDOW_EVENTS = 'touchstart touchmove touchend touchcancel';\n\n/**\n * Touch events input\n * @constructor\n * @extends Input\n */\nfunction SingleTouchInput() {\n    this.evTarget = SINGLE_TOUCH_TARGET_EVENTS;\n    this.evWin = SINGLE_TOUCH_WINDOW_EVENTS;\n    this.started = false;\n\n    Input.apply(this, arguments);\n}\n\ninherit(SingleTouchInput, Input, {\n    handler: function TEhandler(ev) {\n        var type = SINGLE_TOUCH_INPUT_MAP[ev.type];\n\n        // should we handle the touch events?\n        if (type === INPUT_START) {\n            this.started = true;\n        }\n\n        if (!this.started) {\n            return;\n        }\n\n        var touches = normalizeSingleTouches.call(this, ev, type);\n\n        // when done, reset the started state\n        if (type & (INPUT_END | INPUT_CANCEL) && touches[0].length - touches[1].length === 0) {\n            this.started = false;\n        }\n\n        this.callback(this.manager, type, {\n            pointers: touches[0],\n            changedPointers: touches[1],\n            pointerType: INPUT_TYPE_TOUCH,\n            srcEvent: ev\n        });\n    }\n});\n\n/**\n * @this {TouchInput}\n * @param {Object} ev\n * @param {Number} type flag\n * @returns {undefined|Array} [all, changed]\n */\nfunction normalizeSingleTouches(ev, type) {\n    var all = toArray(ev.touches);\n    var changed = toArray(ev.changedTouches);\n\n    if (type & (INPUT_END | INPUT_CANCEL)) {\n        all = uniqueArray(all.concat(changed), 'identifier', true);\n    }\n\n    return [all, changed];\n}\n\nvar TOUCH_INPUT_MAP = {\n    touchstart: INPUT_START,\n    touchmove: INPUT_MOVE,\n    touchend: INPUT_END,\n    touchcancel: INPUT_CANCEL\n};\n\nvar TOUCH_TARGET_EVENTS = 'touchstart touchmove touchend touchcancel';\n\n/**\n * Multi-user touch events input\n * @constructor\n * @extends Input\n */\nfunction TouchInput() {\n    this.evTarget = TOUCH_TARGET_EVENTS;\n    this.targetIds = {};\n\n    Input.apply(this, arguments);\n}\n\ninherit(TouchInput, Input, {\n    handler: function MTEhandler(ev) {\n        var type = TOUCH_INPUT_MAP[ev.type];\n        var touches = getTouches.call(this, ev, type);\n        if (!touches) {\n            return;\n        }\n\n        this.callback(this.manager, type, {\n            pointers: touches[0],\n            changedPointers: touches[1],\n            pointerType: INPUT_TYPE_TOUCH,\n            srcEvent: ev\n        });\n    }\n});\n\n/**\n * @this {TouchInput}\n * @param {Object} ev\n * @param {Number} type flag\n * @returns {undefined|Array} [all, changed]\n */\nfunction getTouches(ev, type) {\n    var allTouches = toArray(ev.touches);\n    var targetIds = this.targetIds;\n\n    // when there is only one touch, the process can be simplified\n    if (type & (INPUT_START | INPUT_MOVE) && allTouches.length === 1) {\n        targetIds[allTouches[0].identifier] = true;\n        return [allTouches, allTouches];\n    }\n\n    var i,\n        targetTouches,\n        changedTouches = toArray(ev.changedTouches),\n        changedTargetTouches = [],\n        target = this.target;\n\n    // get target touches from touches\n    targetTouches = allTouches.filter(function(touch) {\n        return hasParent(touch.target, target);\n    });\n\n    // collect touches\n    if (type === INPUT_START) {\n        i = 0;\n        while (i < targetTouches.length) {\n            targetIds[targetTouches[i].identifier] = true;\n            i++;\n        }\n    }\n\n    // filter changed touches to only contain touches that exist in the collected target ids\n    i = 0;\n    while (i < changedTouches.length) {\n        if (targetIds[changedTouches[i].identifier]) {\n            changedTargetTouches.push(changedTouches[i]);\n        }\n\n        // cleanup removed touches\n        if (type & (INPUT_END | INPUT_CANCEL)) {\n            delete targetIds[changedTouches[i].identifier];\n        }\n        i++;\n    }\n\n    if (!changedTargetTouches.length) {\n        return;\n    }\n\n    return [\n        // merge targetTouches with changedTargetTouches so it contains ALL touches, including 'end' and 'cancel'\n        uniqueArray(targetTouches.concat(changedTargetTouches), 'identifier', true),\n        changedTargetTouches\n    ];\n}\n\n/**\n * Combined touch and mouse input\n *\n * Touch has a higher priority then mouse, and while touching no mouse events are allowed.\n * This because touch devices also emit mouse events while doing a touch.\n *\n * @constructor\n * @extends Input\n */\n\nvar DEDUP_TIMEOUT = 2500;\nvar DEDUP_DISTANCE = 25;\n\nfunction TouchMouseInput() {\n    Input.apply(this, arguments);\n\n    var handler = bindFn(this.handler, this);\n    this.touch = new TouchInput(this.manager, handler);\n    this.mouse = new MouseInput(this.manager, handler);\n\n    this.primaryTouch = null;\n    this.lastTouches = [];\n}\n\ninherit(TouchMouseInput, Input, {\n    /**\n     * handle mouse and touch events\n     * @param {Hammer} manager\n     * @param {String} inputEvent\n     * @param {Object} inputData\n     */\n    handler: function TMEhandler(manager, inputEvent, inputData) {\n        var isTouch = (inputData.pointerType == INPUT_TYPE_TOUCH),\n            isMouse = (inputData.pointerType == INPUT_TYPE_MOUSE);\n\n        if (isMouse && inputData.sourceCapabilities && inputData.sourceCapabilities.firesTouchEvents) {\n            return;\n        }\n\n        // when we're in a touch event, record touches to  de-dupe synthetic mouse event\n        if (isTouch) {\n            recordTouches.call(this, inputEvent, inputData);\n        } else if (isMouse && isSyntheticEvent.call(this, inputData)) {\n            return;\n        }\n\n        this.callback(manager, inputEvent, inputData);\n    },\n\n    /**\n     * remove the event listeners\n     */\n    destroy: function destroy() {\n        this.touch.destroy();\n        this.mouse.destroy();\n    }\n});\n\nfunction recordTouches(eventType, eventData) {\n    if (eventType & INPUT_START) {\n        this.primaryTouch = eventData.changedPointers[0].identifier;\n        setLastTouch.call(this, eventData);\n    } else if (eventType & (INPUT_END | INPUT_CANCEL)) {\n        setLastTouch.call(this, eventData);\n    }\n}\n\nfunction setLastTouch(eventData) {\n    var touch = eventData.changedPointers[0];\n\n    if (touch.identifier === this.primaryTouch) {\n        var lastTouch = {x: touch.clientX, y: touch.clientY};\n        this.lastTouches.push(lastTouch);\n        var lts = this.lastTouches;\n        var removeLastTouch = function() {\n            var i = lts.indexOf(lastTouch);\n            if (i > -1) {\n                lts.splice(i, 1);\n            }\n        };\n        setTimeout(removeLastTouch, DEDUP_TIMEOUT);\n    }\n}\n\nfunction isSyntheticEvent(eventData) {\n    var x = eventData.srcEvent.clientX, y = eventData.srcEvent.clientY;\n    for (var i = 0; i < this.lastTouches.length; i++) {\n        var t = this.lastTouches[i];\n        var dx = Math.abs(x - t.x), dy = Math.abs(y - t.y);\n        if (dx <= DEDUP_DISTANCE && dy <= DEDUP_DISTANCE) {\n            return true;\n        }\n    }\n    return false;\n}\n\nvar PREFIXED_TOUCH_ACTION = prefixed(TEST_ELEMENT.style, 'touchAction');\nvar NATIVE_TOUCH_ACTION = PREFIXED_TOUCH_ACTION !== undefined;\n\n// magical touchAction value\nvar TOUCH_ACTION_COMPUTE = 'compute';\nvar TOUCH_ACTION_AUTO = 'auto';\nvar TOUCH_ACTION_MANIPULATION = 'manipulation'; // not implemented\nvar TOUCH_ACTION_NONE = 'none';\nvar TOUCH_ACTION_PAN_X = 'pan-x';\nvar TOUCH_ACTION_PAN_Y = 'pan-y';\nvar TOUCH_ACTION_MAP = getTouchActionProps();\n\n/**\n * Touch Action\n * sets the touchAction property or uses the js alternative\n * @param {Manager} manager\n * @param {String} value\n * @constructor\n */\nfunction TouchAction(manager, value) {\n    this.manager = manager;\n    this.set(value);\n}\n\nTouchAction.prototype = {\n    /**\n     * set the touchAction value on the element or enable the polyfill\n     * @param {String} value\n     */\n    set: function(value) {\n        // find out the touch-action by the event handlers\n        if (value == TOUCH_ACTION_COMPUTE) {\n            value = this.compute();\n        }\n\n        if (NATIVE_TOUCH_ACTION && this.manager.element.style && TOUCH_ACTION_MAP[value]) {\n            this.manager.element.style[PREFIXED_TOUCH_ACTION] = value;\n        }\n        this.actions = value.toLowerCase().trim();\n    },\n\n    /**\n     * just re-set the touchAction value\n     */\n    update: function() {\n        this.set(this.manager.options.touchAction);\n    },\n\n    /**\n     * compute the value for the touchAction property based on the recognizer's settings\n     * @returns {String} value\n     */\n    compute: function() {\n        var actions = [];\n        each(this.manager.recognizers, function(recognizer) {\n            if (boolOrFn(recognizer.options.enable, [recognizer])) {\n                actions = actions.concat(recognizer.getTouchAction());\n            }\n        });\n        return cleanTouchActions(actions.join(' '));\n    },\n\n    /**\n     * this method is called on each input cycle and provides the preventing of the browser behavior\n     * @param {Object} input\n     */\n    preventDefaults: function(input) {\n        var srcEvent = input.srcEvent;\n        var direction = input.offsetDirection;\n\n        // if the touch action did prevented once this session\n        if (this.manager.session.prevented) {\n            srcEvent.preventDefault();\n            return;\n        }\n\n        var actions = this.actions;\n        var hasNone = inStr(actions, TOUCH_ACTION_NONE) && !TOUCH_ACTION_MAP[TOUCH_ACTION_NONE];\n        var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_Y];\n        var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_X];\n\n        if (hasNone) {\n            //do not prevent defaults if this is a tap gesture\n\n            var isTapPointer = input.pointers.length === 1;\n            var isTapMovement = input.distance < 2;\n            var isTapTouchTime = input.deltaTime < 250;\n\n            if (isTapPointer && isTapMovement && isTapTouchTime) {\n                return;\n            }\n        }\n\n        if (hasPanX && hasPanY) {\n            // `pan-x pan-y` means browser handles all scrolling/panning, do not prevent\n            return;\n        }\n\n        if (hasNone ||\n            (hasPanY && direction & DIRECTION_HORIZONTAL) ||\n            (hasPanX && direction & DIRECTION_VERTICAL)) {\n            return this.preventSrc(srcEvent);\n        }\n    },\n\n    /**\n     * call preventDefault to prevent the browser's default behavior (scrolling in most cases)\n     * @param {Object} srcEvent\n     */\n    preventSrc: function(srcEvent) {\n        this.manager.session.prevented = true;\n        srcEvent.preventDefault();\n    }\n};\n\n/**\n * when the touchActions are collected they are not a valid value, so we need to clean things up. *\n * @param {String} actions\n * @returns {*}\n */\nfunction cleanTouchActions(actions) {\n    // none\n    if (inStr(actions, TOUCH_ACTION_NONE)) {\n        return TOUCH_ACTION_NONE;\n    }\n\n    var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X);\n    var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y);\n\n    // if both pan-x and pan-y are set (different recognizers\n    // for different directions, e.g. horizontal pan but vertical swipe?)\n    // we need none (as otherwise with pan-x pan-y combined none of these\n    // recognizers will work, since the browser would handle all panning\n    if (hasPanX && hasPanY) {\n        return TOUCH_ACTION_NONE;\n    }\n\n    // pan-x OR pan-y\n    if (hasPanX || hasPanY) {\n        return hasPanX ? TOUCH_ACTION_PAN_X : TOUCH_ACTION_PAN_Y;\n    }\n\n    // manipulation\n    if (inStr(actions, TOUCH_ACTION_MANIPULATION)) {\n        return TOUCH_ACTION_MANIPULATION;\n    }\n\n    return TOUCH_ACTION_AUTO;\n}\n\nfunction getTouchActionProps() {\n    if (!NATIVE_TOUCH_ACTION) {\n        return false;\n    }\n    var touchMap = {};\n    var cssSupports = window.CSS && window.CSS.supports;\n    ['auto', 'manipulation', 'pan-y', 'pan-x', 'pan-x pan-y', 'none'].forEach(function(val) {\n\n        // If css.supports is not supported but there is native touch-action assume it supports\n        // all values. This is the case for IE 10 and 11.\n        touchMap[val] = cssSupports ? window.CSS.supports('touch-action', val) : true;\n    });\n    return touchMap;\n}\n\n/**\n * Recognizer flow explained; *\n * All recognizers have the initial state of POSSIBLE when a input session starts.\n * The definition of a input session is from the first input until the last input, with all it's movement in it. *\n * Example session for mouse-input: mousedown -> mousemove -> mouseup\n *\n * On each recognizing cycle (see Manager.recognize) the .recognize() method is executed\n * which determines with state it should be.\n *\n * If the recognizer has the state FAILED, CANCELLED or RECOGNIZED (equals ENDED), it is reset to\n * POSSIBLE to give it another change on the next cycle.\n *\n *               Possible\n *                  |\n *            +-----+---------------+\n *            |                     |\n *      +-----+-----+               |\n *      |           |               |\n *   Failed      Cancelled          |\n *                          +-------+------+\n *                          |              |\n *                      Recognized       Began\n *                                         |\n *                                      Changed\n *                                         |\n *                                  Ended/Recognized\n */\nvar STATE_POSSIBLE = 1;\nvar STATE_BEGAN = 2;\nvar STATE_CHANGED = 4;\nvar STATE_ENDED = 8;\nvar STATE_RECOGNIZED = STATE_ENDED;\nvar STATE_CANCELLED = 16;\nvar STATE_FAILED = 32;\n\n/**\n * Recognizer\n * Every recognizer needs to extend from this class.\n * @constructor\n * @param {Object} options\n */\nfunction Recognizer(options) {\n    this.options = assign({}, this.defaults, options || {});\n\n    this.id = uniqueId();\n\n    this.manager = null;\n\n    // default is enable true\n    this.options.enable = ifUndefined(this.options.enable, true);\n\n    this.state = STATE_POSSIBLE;\n\n    this.simultaneous = {};\n    this.requireFail = [];\n}\n\nRecognizer.prototype = {\n    /**\n     * @virtual\n     * @type {Object}\n     */\n    defaults: {},\n\n    /**\n     * set options\n     * @param {Object} options\n     * @return {Recognizer}\n     */\n    set: function(options) {\n        assign(this.options, options);\n\n        // also update the touchAction, in case something changed about the directions/enabled state\n        this.manager && this.manager.touchAction.update();\n        return this;\n    },\n\n    /**\n     * recognize simultaneous with an other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    recognizeWith: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'recognizeWith', this)) {\n            return this;\n        }\n\n        var simultaneous = this.simultaneous;\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        if (!simultaneous[otherRecognizer.id]) {\n            simultaneous[otherRecognizer.id] = otherRecognizer;\n            otherRecognizer.recognizeWith(this);\n        }\n        return this;\n    },\n\n    /**\n     * drop the simultaneous link. it doesnt remove the link on the other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    dropRecognizeWith: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'dropRecognizeWith', this)) {\n            return this;\n        }\n\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        delete this.simultaneous[otherRecognizer.id];\n        return this;\n    },\n\n    /**\n     * recognizer can only run when an other is failing\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    requireFailure: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'requireFailure', this)) {\n            return this;\n        }\n\n        var requireFail = this.requireFail;\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        if (inArray(requireFail, otherRecognizer) === -1) {\n            requireFail.push(otherRecognizer);\n            otherRecognizer.requireFailure(this);\n        }\n        return this;\n    },\n\n    /**\n     * drop the requireFailure link. it does not remove the link on the other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    dropRequireFailure: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'dropRequireFailure', this)) {\n            return this;\n        }\n\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        var index = inArray(this.requireFail, otherRecognizer);\n        if (index > -1) {\n            this.requireFail.splice(index, 1);\n        }\n        return this;\n    },\n\n    /**\n     * has require failures boolean\n     * @returns {boolean}\n     */\n    hasRequireFailures: function() {\n        return this.requireFail.length > 0;\n    },\n\n    /**\n     * if the recognizer can recognize simultaneous with an other recognizer\n     * @param {Recognizer} otherRecognizer\n     * @returns {Boolean}\n     */\n    canRecognizeWith: function(otherRecognizer) {\n        return !!this.simultaneous[otherRecognizer.id];\n    },\n\n    /**\n     * You should use `tryEmit` instead of `emit` directly to check\n     * that all the needed recognizers has failed before emitting.\n     * @param {Object} input\n     */\n    emit: function(input) {\n        var self = this;\n        var state = this.state;\n\n        function emit(event) {\n            self.manager.emit(event, input);\n        }\n\n        // 'panstart' and 'panmove'\n        if (state < STATE_ENDED) {\n            emit(self.options.event + stateStr(state));\n        }\n\n        emit(self.options.event); // simple 'eventName' events\n\n        if (input.additionalEvent) { // additional event(panleft, panright, pinchin, pinchout...)\n            emit(input.additionalEvent);\n        }\n\n        // panend and pancancel\n        if (state >= STATE_ENDED) {\n            emit(self.options.event + stateStr(state));\n        }\n    },\n\n    /**\n     * Check that all the require failure recognizers has failed,\n     * if true, it emits a gesture event,\n     * otherwise, setup the state to FAILED.\n     * @param {Object} input\n     */\n    tryEmit: function(input) {\n        if (this.canEmit()) {\n            return this.emit(input);\n        }\n        // it's failing anyway\n        this.state = STATE_FAILED;\n    },\n\n    /**\n     * can we emit?\n     * @returns {boolean}\n     */\n    canEmit: function() {\n        var i = 0;\n        while (i < this.requireFail.length) {\n            if (!(this.requireFail[i].state & (STATE_FAILED | STATE_POSSIBLE))) {\n                return false;\n            }\n            i++;\n        }\n        return true;\n    },\n\n    /**\n     * update the recognizer\n     * @param {Object} inputData\n     */\n    recognize: function(inputData) {\n        // make a new copy of the inputData\n        // so we can change the inputData without messing up the other recognizers\n        var inputDataClone = assign({}, inputData);\n\n        // is is enabled and allow recognizing?\n        if (!boolOrFn(this.options.enable, [this, inputDataClone])) {\n            this.reset();\n            this.state = STATE_FAILED;\n            return;\n        }\n\n        // reset when we've reached the end\n        if (this.state & (STATE_RECOGNIZED | STATE_CANCELLED | STATE_FAILED)) {\n            this.state = STATE_POSSIBLE;\n        }\n\n        this.state = this.process(inputDataClone);\n\n        // the recognizer has recognized a gesture\n        // so trigger an event\n        if (this.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED | STATE_CANCELLED)) {\n            this.tryEmit(inputDataClone);\n        }\n    },\n\n    /**\n     * return the state of the recognizer\n     * the actual recognizing happens in this method\n     * @virtual\n     * @param {Object} inputData\n     * @returns {Const} STATE\n     */\n    process: function(inputData) { }, // jshint ignore:line\n\n    /**\n     * return the preferred touch-action\n     * @virtual\n     * @returns {Array}\n     */\n    getTouchAction: function() { },\n\n    /**\n     * called when the gesture isn't allowed to recognize\n     * like when another is being recognized or it is disabled\n     * @virtual\n     */\n    reset: function() { }\n};\n\n/**\n * get a usable string, used as event postfix\n * @param {Const} state\n * @returns {String} state\n */\nfunction stateStr(state) {\n    if (state & STATE_CANCELLED) {\n        return 'cancel';\n    } else if (state & STATE_ENDED) {\n        return 'end';\n    } else if (state & STATE_CHANGED) {\n        return 'move';\n    } else if (state & STATE_BEGAN) {\n        return 'start';\n    }\n    return '';\n}\n\n/**\n * direction cons to string\n * @param {Const} direction\n * @returns {String}\n */\nfunction directionStr(direction) {\n    if (direction == DIRECTION_DOWN) {\n        return 'down';\n    } else if (direction == DIRECTION_UP) {\n        return 'up';\n    } else if (direction == DIRECTION_LEFT) {\n        return 'left';\n    } else if (direction == DIRECTION_RIGHT) {\n        return 'right';\n    }\n    return '';\n}\n\n/**\n * get a recognizer by name if it is bound to a manager\n * @param {Recognizer|String} otherRecognizer\n * @param {Recognizer} recognizer\n * @returns {Recognizer}\n */\nfunction getRecognizerByNameIfManager(otherRecognizer, recognizer) {\n    var manager = recognizer.manager;\n    if (manager) {\n        return manager.get(otherRecognizer);\n    }\n    return otherRecognizer;\n}\n\n/**\n * This recognizer is just used as a base for the simple attribute recognizers.\n * @constructor\n * @extends Recognizer\n */\nfunction AttrRecognizer() {\n    Recognizer.apply(this, arguments);\n}\n\ninherit(AttrRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof AttrRecognizer\n     */\n    defaults: {\n        /**\n         * @type {Number}\n         * @default 1\n         */\n        pointers: 1\n    },\n\n    /**\n     * Used to check if it the recognizer receives valid input, like input.distance > 10.\n     * @memberof AttrRecognizer\n     * @param {Object} input\n     * @returns {Boolean} recognized\n     */\n    attrTest: function(input) {\n        var optionPointers = this.options.pointers;\n        return optionPointers === 0 || input.pointers.length === optionPointers;\n    },\n\n    /**\n     * Process the input and return the state for the recognizer\n     * @memberof AttrRecognizer\n     * @param {Object} input\n     * @returns {*} State\n     */\n    process: function(input) {\n        var state = this.state;\n        var eventType = input.eventType;\n\n        var isRecognized = state & (STATE_BEGAN | STATE_CHANGED);\n        var isValid = this.attrTest(input);\n\n        // on cancel input and we've recognized before, return STATE_CANCELLED\n        if (isRecognized && (eventType & INPUT_CANCEL || !isValid)) {\n            return state | STATE_CANCELLED;\n        } else if (isRecognized || isValid) {\n            if (eventType & INPUT_END) {\n                return state | STATE_ENDED;\n            } else if (!(state & STATE_BEGAN)) {\n                return STATE_BEGAN;\n            }\n            return state | STATE_CHANGED;\n        }\n        return STATE_FAILED;\n    }\n});\n\n/**\n * Pan\n * Recognized when the pointer is down and moved in the allowed direction.\n * @constructor\n * @extends AttrRecognizer\n */\nfunction PanRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n\n    this.pX = null;\n    this.pY = null;\n}\n\ninherit(PanRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof PanRecognizer\n     */\n    defaults: {\n        event: 'pan',\n        threshold: 10,\n        pointers: 1,\n        direction: DIRECTION_ALL\n    },\n\n    getTouchAction: function() {\n        var direction = this.options.direction;\n        var actions = [];\n        if (direction & DIRECTION_HORIZONTAL) {\n            actions.push(TOUCH_ACTION_PAN_Y);\n        }\n        if (direction & DIRECTION_VERTICAL) {\n            actions.push(TOUCH_ACTION_PAN_X);\n        }\n        return actions;\n    },\n\n    directionTest: function(input) {\n        var options = this.options;\n        var hasMoved = true;\n        var distance = input.distance;\n        var direction = input.direction;\n        var x = input.deltaX;\n        var y = input.deltaY;\n\n        // lock to axis?\n        if (!(direction & options.direction)) {\n            if (options.direction & DIRECTION_HORIZONTAL) {\n                direction = (x === 0) ? DIRECTION_NONE : (x < 0) ? DIRECTION_LEFT : DIRECTION_RIGHT;\n                hasMoved = x != this.pX;\n                distance = Math.abs(input.deltaX);\n            } else {\n                direction = (y === 0) ? DIRECTION_NONE : (y < 0) ? DIRECTION_UP : DIRECTION_DOWN;\n                hasMoved = y != this.pY;\n                distance = Math.abs(input.deltaY);\n            }\n        }\n        input.direction = direction;\n        return hasMoved && distance > options.threshold && direction & options.direction;\n    },\n\n    attrTest: function(input) {\n        return AttrRecognizer.prototype.attrTest.call(this, input) &&\n            (this.state & STATE_BEGAN || (!(this.state & STATE_BEGAN) && this.directionTest(input)));\n    },\n\n    emit: function(input) {\n\n        this.pX = input.deltaX;\n        this.pY = input.deltaY;\n\n        var direction = directionStr(input.direction);\n\n        if (direction) {\n            input.additionalEvent = this.options.event + direction;\n        }\n        this._super.emit.call(this, input);\n    }\n});\n\n/**\n * Pinch\n * Recognized when two or more pointers are moving toward (zoom-in) or away from each other (zoom-out).\n * @constructor\n * @extends AttrRecognizer\n */\nfunction PinchRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(PinchRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof PinchRecognizer\n     */\n    defaults: {\n        event: 'pinch',\n        threshold: 0,\n        pointers: 2\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_NONE];\n    },\n\n    attrTest: function(input) {\n        return this._super.attrTest.call(this, input) &&\n            (Math.abs(input.scale - 1) > this.options.threshold || this.state & STATE_BEGAN);\n    },\n\n    emit: function(input) {\n        if (input.scale !== 1) {\n            var inOut = input.scale < 1 ? 'in' : 'out';\n            input.additionalEvent = this.options.event + inOut;\n        }\n        this._super.emit.call(this, input);\n    }\n});\n\n/**\n * Press\n * Recognized when the pointer is down for x ms without any movement.\n * @constructor\n * @extends Recognizer\n */\nfunction PressRecognizer() {\n    Recognizer.apply(this, arguments);\n\n    this._timer = null;\n    this._input = null;\n}\n\ninherit(PressRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof PressRecognizer\n     */\n    defaults: {\n        event: 'press',\n        pointers: 1,\n        time: 251, // minimal time of the pointer to be pressed\n        threshold: 9 // a minimal movement is ok, but keep it low\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_AUTO];\n    },\n\n    process: function(input) {\n        var options = this.options;\n        var validPointers = input.pointers.length === options.pointers;\n        var validMovement = input.distance < options.threshold;\n        var validTime = input.deltaTime > options.time;\n\n        this._input = input;\n\n        // we only allow little movement\n        // and we've reached an end event, so a tap is possible\n        if (!validMovement || !validPointers || (input.eventType & (INPUT_END | INPUT_CANCEL) && !validTime)) {\n            this.reset();\n        } else if (input.eventType & INPUT_START) {\n            this.reset();\n            this._timer = setTimeoutContext(function() {\n                this.state = STATE_RECOGNIZED;\n                this.tryEmit();\n            }, options.time, this);\n        } else if (input.eventType & INPUT_END) {\n            return STATE_RECOGNIZED;\n        }\n        return STATE_FAILED;\n    },\n\n    reset: function() {\n        clearTimeout(this._timer);\n    },\n\n    emit: function(input) {\n        if (this.state !== STATE_RECOGNIZED) {\n            return;\n        }\n\n        if (input && (input.eventType & INPUT_END)) {\n            this.manager.emit(this.options.event + 'up', input);\n        } else {\n            this._input.timeStamp = now();\n            this.manager.emit(this.options.event, this._input);\n        }\n    }\n});\n\n/**\n * Rotate\n * Recognized when two or more pointer are moving in a circular motion.\n * @constructor\n * @extends AttrRecognizer\n */\nfunction RotateRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(RotateRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof RotateRecognizer\n     */\n    defaults: {\n        event: 'rotate',\n        threshold: 0,\n        pointers: 2\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_NONE];\n    },\n\n    attrTest: function(input) {\n        return this._super.attrTest.call(this, input) &&\n            (Math.abs(input.rotation) > this.options.threshold || this.state & STATE_BEGAN);\n    }\n});\n\n/**\n * Swipe\n * Recognized when the pointer is moving fast (velocity), with enough distance in the allowed direction.\n * @constructor\n * @extends AttrRecognizer\n */\nfunction SwipeRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(SwipeRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof SwipeRecognizer\n     */\n    defaults: {\n        event: 'swipe',\n        threshold: 10,\n        velocity: 0.3,\n        direction: DIRECTION_HORIZONTAL | DIRECTION_VERTICAL,\n        pointers: 1\n    },\n\n    getTouchAction: function() {\n        return PanRecognizer.prototype.getTouchAction.call(this);\n    },\n\n    attrTest: function(input) {\n        var direction = this.options.direction;\n        var velocity;\n\n        if (direction & (DIRECTION_HORIZONTAL | DIRECTION_VERTICAL)) {\n            velocity = input.overallVelocity;\n        } else if (direction & DIRECTION_HORIZONTAL) {\n            velocity = input.overallVelocityX;\n        } else if (direction & DIRECTION_VERTICAL) {\n            velocity = input.overallVelocityY;\n        }\n\n        return this._super.attrTest.call(this, input) &&\n            direction & input.offsetDirection &&\n            input.distance > this.options.threshold &&\n            input.maxPointers == this.options.pointers &&\n            abs(velocity) > this.options.velocity && input.eventType & INPUT_END;\n    },\n\n    emit: function(input) {\n        var direction = directionStr(input.offsetDirection);\n        if (direction) {\n            this.manager.emit(this.options.event + direction, input);\n        }\n\n        this.manager.emit(this.options.event, input);\n    }\n});\n\n/**\n * A tap is ecognized when the pointer is doing a small tap/click. Multiple taps are recognized if they occur\n * between the given interval and position. The delay option can be used to recognize multi-taps without firing\n * a single tap.\n *\n * The eventData from the emitted event contains the property `tapCount`, which contains the amount of\n * multi-taps being recognized.\n * @constructor\n * @extends Recognizer\n */\nfunction TapRecognizer() {\n    Recognizer.apply(this, arguments);\n\n    // previous time and center,\n    // used for tap counting\n    this.pTime = false;\n    this.pCenter = false;\n\n    this._timer = null;\n    this._input = null;\n    this.count = 0;\n}\n\ninherit(TapRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof PinchRecognizer\n     */\n    defaults: {\n        event: 'tap',\n        pointers: 1,\n        taps: 1,\n        interval: 300, // max time between the multi-tap taps\n        time: 250, // max time of the pointer to be down (like finger on the screen)\n        threshold: 9, // a minimal movement is ok, but keep it low\n        posThreshold: 10 // a multi-tap can be a bit off the initial position\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_MANIPULATION];\n    },\n\n    process: function(input) {\n        var options = this.options;\n\n        var validPointers = input.pointers.length === options.pointers;\n        var validMovement = input.distance < options.threshold;\n        var validTouchTime = input.deltaTime < options.time;\n\n        this.reset();\n\n        if ((input.eventType & INPUT_START) && (this.count === 0)) {\n            return this.failTimeout();\n        }\n\n        // we only allow little movement\n        // and we've reached an end event, so a tap is possible\n        if (validMovement && validTouchTime && validPointers) {\n            if (input.eventType != INPUT_END) {\n                return this.failTimeout();\n            }\n\n            var validInterval = this.pTime ? (input.timeStamp - this.pTime < options.interval) : true;\n            var validMultiTap = !this.pCenter || getDistance(this.pCenter, input.center) < options.posThreshold;\n\n            this.pTime = input.timeStamp;\n            this.pCenter = input.center;\n\n            if (!validMultiTap || !validInterval) {\n                this.count = 1;\n            } else {\n                this.count += 1;\n            }\n\n            this._input = input;\n\n            // if tap count matches we have recognized it,\n            // else it has began recognizing...\n            var tapCount = this.count % options.taps;\n            if (tapCount === 0) {\n                // no failing requirements, immediately trigger the tap event\n                // or wait as long as the multitap interval to trigger\n                if (!this.hasRequireFailures()) {\n                    return STATE_RECOGNIZED;\n                } else {\n                    this._timer = setTimeoutContext(function() {\n                        this.state = STATE_RECOGNIZED;\n                        this.tryEmit();\n                    }, options.interval, this);\n                    return STATE_BEGAN;\n                }\n            }\n        }\n        return STATE_FAILED;\n    },\n\n    failTimeout: function() {\n        this._timer = setTimeoutContext(function() {\n            this.state = STATE_FAILED;\n        }, this.options.interval, this);\n        return STATE_FAILED;\n    },\n\n    reset: function() {\n        clearTimeout(this._timer);\n    },\n\n    emit: function() {\n        if (this.state == STATE_RECOGNIZED) {\n            this._input.tapCount = this.count;\n            this.manager.emit(this.options.event, this._input);\n        }\n    }\n});\n\n/**\n * Simple way to create a manager with a default set of recognizers.\n * @param {HTMLElement} element\n * @param {Object} [options]\n * @constructor\n */\nfunction Hammer(element, options) {\n    options = options || {};\n    options.recognizers = ifUndefined(options.recognizers, Hammer.defaults.preset);\n    return new Manager(element, options);\n}\n\n/**\n * @const {string}\n */\nHammer.VERSION = '2.0.7';\n\n/**\n * default settings\n * @namespace\n */\nHammer.defaults = {\n    /**\n     * set if DOM events are being triggered.\n     * But this is slower and unused by simple implementations, so disabled by default.\n     * @type {Boolean}\n     * @default false\n     */\n    domEvents: false,\n\n    /**\n     * The value for the touchAction property/fallback.\n     * When set to `compute` it will magically set the correct value based on the added recognizers.\n     * @type {String}\n     * @default compute\n     */\n    touchAction: TOUCH_ACTION_COMPUTE,\n\n    /**\n     * @type {Boolean}\n     * @default true\n     */\n    enable: true,\n\n    /**\n     * EXPERIMENTAL FEATURE -- can be removed/changed\n     * Change the parent input target element.\n     * If Null, then it is being set the to main element.\n     * @type {Null|EventTarget}\n     * @default null\n     */\n    inputTarget: null,\n\n    /**\n     * force an input class\n     * @type {Null|Function}\n     * @default null\n     */\n    inputClass: null,\n\n    /**\n     * Default recognizer setup when calling `Hammer()`\n     * When creating a new Manager these will be skipped.\n     * @type {Array}\n     */\n    preset: [\n        // RecognizerClass, options, [recognizeWith, ...], [requireFailure, ...]\n        [RotateRecognizer, {enable: false}],\n        [PinchRecognizer, {enable: false}, ['rotate']],\n        [SwipeRecognizer, {direction: DIRECTION_HORIZONTAL}],\n        [PanRecognizer, {direction: DIRECTION_HORIZONTAL}, ['swipe']],\n        [TapRecognizer],\n        [TapRecognizer, {event: 'doubletap', taps: 2}, ['tap']],\n        [PressRecognizer]\n    ],\n\n    /**\n     * Some CSS properties can be used to improve the working of Hammer.\n     * Add them to this method and they will be set when creating a new Manager.\n     * @namespace\n     */\n    cssProps: {\n        /**\n         * Disables text selection to improve the dragging gesture. Mainly for desktop browsers.\n         * @type {String}\n         * @default 'none'\n         */\n        userSelect: 'none',\n\n        /**\n         * Disable the Windows Phone grippers when pressing an element.\n         * @type {String}\n         * @default 'none'\n         */\n        touchSelect: 'none',\n\n        /**\n         * Disables the default callout shown when you touch and hold a touch target.\n         * On iOS, when you touch and hold a touch target such as a link, Safari displays\n         * a callout containing information about the link. This property allows you to disable that callout.\n         * @type {String}\n         * @default 'none'\n         */\n        touchCallout: 'none',\n\n        /**\n         * Specifies whether zooming is enabled. Used by IE10>\n         * @type {String}\n         * @default 'none'\n         */\n        contentZooming: 'none',\n\n        /**\n         * Specifies that an entire element should be draggable instead of its contents. Mainly for desktop browsers.\n         * @type {String}\n         * @default 'none'\n         */\n        userDrag: 'none',\n\n        /**\n         * Overrides the highlight color shown when the user taps a link or a JavaScript\n         * clickable element in iOS. This property obeys the alpha value, if specified.\n         * @type {String}\n         * @default 'rgba(0,0,0,0)'\n         */\n        tapHighlightColor: 'rgba(0,0,0,0)'\n    }\n};\n\nvar STOP = 1;\nvar FORCED_STOP = 2;\n\n/**\n * Manager\n * @param {HTMLElement} element\n * @param {Object} [options]\n * @constructor\n */\nfunction Manager(element, options) {\n    this.options = assign({}, Hammer.defaults, options || {});\n\n    this.options.inputTarget = this.options.inputTarget || element;\n\n    this.handlers = {};\n    this.session = {};\n    this.recognizers = [];\n    this.oldCssProps = {};\n\n    this.element = element;\n    this.input = createInputInstance(this);\n    this.touchAction = new TouchAction(this, this.options.touchAction);\n\n    toggleCssProps(this, true);\n\n    each(this.options.recognizers, function(item) {\n        var recognizer = this.add(new (item[0])(item[1]));\n        item[2] && recognizer.recognizeWith(item[2]);\n        item[3] && recognizer.requireFailure(item[3]);\n    }, this);\n}\n\nManager.prototype = {\n    /**\n     * set options\n     * @param {Object} options\n     * @returns {Manager}\n     */\n    set: function(options) {\n        assign(this.options, options);\n\n        // Options that need a little more setup\n        if (options.touchAction) {\n            this.touchAction.update();\n        }\n        if (options.inputTarget) {\n            // Clean up existing event listeners and reinitialize\n            this.input.destroy();\n            this.input.target = options.inputTarget;\n            this.input.init();\n        }\n        return this;\n    },\n\n    /**\n     * stop recognizing for this session.\n     * This session will be discarded, when a new [input]start event is fired.\n     * When forced, the recognizer cycle is stopped immediately.\n     * @param {Boolean} [force]\n     */\n    stop: function(force) {\n        this.session.stopped = force ? FORCED_STOP : STOP;\n    },\n\n    /**\n     * run the recognizers!\n     * called by the inputHandler function on every movement of the pointers (touches)\n     * it walks through all the recognizers and tries to detect the gesture that is being made\n     * @param {Object} inputData\n     */\n    recognize: function(inputData) {\n        var session = this.session;\n        if (session.stopped) {\n            return;\n        }\n\n        // run the touch-action polyfill\n        this.touchAction.preventDefaults(inputData);\n\n        var recognizer;\n        var recognizers = this.recognizers;\n\n        // this holds the recognizer that is being recognized.\n        // so the recognizer's state needs to be BEGAN, CHANGED, ENDED or RECOGNIZED\n        // if no recognizer is detecting a thing, it is set to `null`\n        var curRecognizer = session.curRecognizer;\n\n        // reset when the last recognizer is recognized\n        // or when we're in a new session\n        if (!curRecognizer || (curRecognizer && curRecognizer.state & STATE_RECOGNIZED)) {\n            curRecognizer = session.curRecognizer = null;\n        }\n\n        var i = 0;\n        while (i < recognizers.length) {\n            recognizer = recognizers[i];\n\n            // find out if we are allowed try to recognize the input for this one.\n            // 1.   allow if the session is NOT forced stopped (see the .stop() method)\n            // 2.   allow if we still haven't recognized a gesture in this session, or the this recognizer is the one\n            //      that is being recognized.\n            // 3.   allow if the recognizer is allowed to run simultaneous with the current recognized recognizer.\n            //      this can be setup with the `recognizeWith()` method on the recognizer.\n            if (session.stopped !== FORCED_STOP && ( // 1\n                    !curRecognizer || recognizer == curRecognizer || // 2\n                    recognizer.canRecognizeWith(curRecognizer))) { // 3\n                recognizer.recognize(inputData);\n            } else {\n                recognizer.reset();\n            }\n\n            // if the recognizer has been recognizing the input as a valid gesture, we want to store this one as the\n            // current active recognizer. but only if we don't already have an active recognizer\n            if (!curRecognizer && recognizer.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED)) {\n                curRecognizer = session.curRecognizer = recognizer;\n            }\n            i++;\n        }\n    },\n\n    /**\n     * get a recognizer by its event name.\n     * @param {Recognizer|String} recognizer\n     * @returns {Recognizer|Null}\n     */\n    get: function(recognizer) {\n        if (recognizer instanceof Recognizer) {\n            return recognizer;\n        }\n\n        var recognizers = this.recognizers;\n        for (var i = 0; i < recognizers.length; i++) {\n            if (recognizers[i].options.event == recognizer) {\n                return recognizers[i];\n            }\n        }\n        return null;\n    },\n\n    /**\n     * add a recognizer to the manager\n     * existing recognizers with the same event name will be removed\n     * @param {Recognizer} recognizer\n     * @returns {Recognizer|Manager}\n     */\n    add: function(recognizer) {\n        if (invokeArrayArg(recognizer, 'add', this)) {\n            return this;\n        }\n\n        // remove existing\n        var existing = this.get(recognizer.options.event);\n        if (existing) {\n            this.remove(existing);\n        }\n\n        this.recognizers.push(recognizer);\n        recognizer.manager = this;\n\n        this.touchAction.update();\n        return recognizer;\n    },\n\n    /**\n     * remove a recognizer by name or instance\n     * @param {Recognizer|String} recognizer\n     * @returns {Manager}\n     */\n    remove: function(recognizer) {\n        if (invokeArrayArg(recognizer, 'remove', this)) {\n            return this;\n        }\n\n        recognizer = this.get(recognizer);\n\n        // let's make sure this recognizer exists\n        if (recognizer) {\n            var recognizers = this.recognizers;\n            var index = inArray(recognizers, recognizer);\n\n            if (index !== -1) {\n                recognizers.splice(index, 1);\n                this.touchAction.update();\n            }\n        }\n\n        return this;\n    },\n\n    /**\n     * bind event\n     * @param {String} events\n     * @param {Function} handler\n     * @returns {EventEmitter} this\n     */\n    on: function(events, handler) {\n        if (events === undefined) {\n            return;\n        }\n        if (handler === undefined) {\n            return;\n        }\n\n        var handlers = this.handlers;\n        each(splitStr(events), function(event) {\n            handlers[event] = handlers[event] || [];\n            handlers[event].push(handler);\n        });\n        return this;\n    },\n\n    /**\n     * unbind event, leave emit blank to remove all handlers\n     * @param {String} events\n     * @param {Function} [handler]\n     * @returns {EventEmitter} this\n     */\n    off: function(events, handler) {\n        if (events === undefined) {\n            return;\n        }\n\n        var handlers = this.handlers;\n        each(splitStr(events), function(event) {\n            if (!handler) {\n                delete handlers[event];\n            } else {\n                handlers[event] && handlers[event].splice(inArray(handlers[event], handler), 1);\n            }\n        });\n        return this;\n    },\n\n    /**\n     * emit event to the listeners\n     * @param {String} event\n     * @param {Object} data\n     */\n    emit: function(event, data) {\n        // we also want to trigger dom events\n        if (this.options.domEvents) {\n            triggerDomEvent(event, data);\n        }\n\n        // no handlers, so skip it all\n        var handlers = this.handlers[event] && this.handlers[event].slice();\n        if (!handlers || !handlers.length) {\n            return;\n        }\n\n        data.type = event;\n        data.preventDefault = function() {\n            data.srcEvent.preventDefault();\n        };\n\n        var i = 0;\n        while (i < handlers.length) {\n            handlers[i](data);\n            i++;\n        }\n    },\n\n    /**\n     * destroy the manager and unbinds all events\n     * it doesn't unbind dom events, that is the user own responsibility\n     */\n    destroy: function() {\n        this.element && toggleCssProps(this, false);\n\n        this.handlers = {};\n        this.session = {};\n        this.input.destroy();\n        this.element = null;\n    }\n};\n\n/**\n * add/remove the css properties as defined in manager.options.cssProps\n * @param {Manager} manager\n * @param {Boolean} add\n */\nfunction toggleCssProps(manager, add) {\n    var element = manager.element;\n    if (!element.style) {\n        return;\n    }\n    var prop;\n    each(manager.options.cssProps, function(value, name) {\n        prop = prefixed(element.style, name);\n        if (add) {\n            manager.oldCssProps[prop] = element.style[prop];\n            element.style[prop] = value;\n        } else {\n            element.style[prop] = manager.oldCssProps[prop] || '';\n        }\n    });\n    if (!add) {\n        manager.oldCssProps = {};\n    }\n}\n\n/**\n * trigger dom event\n * @param {String} event\n * @param {Object} data\n */\nfunction triggerDomEvent(event, data) {\n    var gestureEvent = document.createEvent('Event');\n    gestureEvent.initEvent(event, true, true);\n    gestureEvent.gesture = data;\n    data.target.dispatchEvent(gestureEvent);\n}\n\nassign(Hammer, {\n    INPUT_START: INPUT_START,\n    INPUT_MOVE: INPUT_MOVE,\n    INPUT_END: INPUT_END,\n    INPUT_CANCEL: INPUT_CANCEL,\n\n    STATE_POSSIBLE: STATE_POSSIBLE,\n    STATE_BEGAN: STATE_BEGAN,\n    STATE_CHANGED: STATE_CHANGED,\n    STATE_ENDED: STATE_ENDED,\n    STATE_RECOGNIZED: STATE_RECOGNIZED,\n    STATE_CANCELLED: STATE_CANCELLED,\n    STATE_FAILED: STATE_FAILED,\n\n    DIRECTION_NONE: DIRECTION_NONE,\n    DIRECTION_LEFT: DIRECTION_LEFT,\n    DIRECTION_RIGHT: DIRECTION_RIGHT,\n    DIRECTION_UP: DIRECTION_UP,\n    DIRECTION_DOWN: DIRECTION_DOWN,\n    DIRECTION_HORIZONTAL: DIRECTION_HORIZONTAL,\n    DIRECTION_VERTICAL: DIRECTION_VERTICAL,\n    DIRECTION_ALL: DIRECTION_ALL,\n\n    Manager: Manager,\n    Input: Input,\n    TouchAction: TouchAction,\n\n    TouchInput: TouchInput,\n    MouseInput: MouseInput,\n    PointerEventInput: PointerEventInput,\n    TouchMouseInput: TouchMouseInput,\n    SingleTouchInput: SingleTouchInput,\n\n    Recognizer: Recognizer,\n    AttrRecognizer: AttrRecognizer,\n    Tap: TapRecognizer,\n    Pan: PanRecognizer,\n    Swipe: SwipeRecognizer,\n    Pinch: PinchRecognizer,\n    Rotate: RotateRecognizer,\n    Press: PressRecognizer,\n\n    on: addEventListeners,\n    off: removeEventListeners,\n    each: each,\n    merge: merge,\n    extend: extend,\n    assign: assign,\n    inherit: inherit,\n    bindFn: bindFn,\n    prefixed: prefixed\n});\n\n// this prevents errors when Hammer is loaded in the presence of an AMD\n//  style loader but by script tag, not by the loader.\nvar freeGlobal = (typeof window !== 'undefined' ? window : (typeof self !== 'undefined' ? self : {})); // jshint ignore:line\nfreeGlobal.Hammer = Hammer;\n\nif (typeof define === 'function' && define.amd) {\n    define(function() {\n        return Hammer;\n    });\n} else if (typeof module != 'undefined' && module.exports) {\n    module.exports = Hammer;\n} else {\n    window[exportName] = Hammer;\n}\n\n})(window, document, 'Hammer');\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/hammerjs/hammer.js\n ** module id = 2\n ** module chunks = 0\n **/"],"sourceRoot":""}